import * as v from '@atcute/lexicons/validations';
import * as AppBskyActorDefs from '../actor/defs.js';
import * as AppBskyEmbedExternal from './external.js';
import * as AppBskyEmbedImages from './images.js';
import * as AppBskyEmbedRecordWithMedia from './recordWithMedia.js';
import * as AppBskyEmbedVideo from './video.js';
import * as AppBskyFeedDefs from '../feed/defs.js';
import * as AppBskyGraphDefs from '../graph/defs.js';
import * as AppBskyLabelerDefs from '../labeler/defs.js';
import * as ComAtprotoLabelDefs from '@atcute/atproto/types/label/defs';
import * as ComAtprotoRepoStrongRef from '@atcute/atproto/types/repo/strongRef';
declare const _mainSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.embed.record">, undefined>;
    readonly record: ComAtprotoRepoStrongRef.mainSchema;
}>;
declare const _viewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.embed.record#view">, undefined>;
    readonly record: v.VariantSchema<readonly [viewBlockedSchema, viewDetachedSchema, viewNotFoundSchema, viewRecordSchema, AppBskyFeedDefs.generatorViewSchema, AppBskyGraphDefs.listViewSchema, AppBskyGraphDefs.starterPackViewBasicSchema, AppBskyLabelerDefs.labelerViewSchema], boolean>;
}>;
declare const _viewBlockedSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.embed.record#viewBlocked">, undefined>;
    readonly author: AppBskyFeedDefs.blockedAuthorSchema;
    blocked: v.LiteralSchema<true>;
    uri: v.FormattedStringSchema<"at-uri">;
}>;
declare const _viewDetachedSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.embed.record#viewDetached">, undefined>;
    detached: v.LiteralSchema<true>;
    uri: v.FormattedStringSchema<"at-uri">;
}>;
declare const _viewNotFoundSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.embed.record#viewNotFound">, undefined>;
    notFound: v.LiteralSchema<true>;
    uri: v.FormattedStringSchema<"at-uri">;
}>;
declare const _viewRecordSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.embed.record#viewRecord">, undefined>;
    readonly author: AppBskyActorDefs.profileViewBasicSchema;
    cid: v.FormattedStringSchema<"cid">;
    readonly embeds: v.OptionalSchema<v.ArraySchema<v.VariantSchema<readonly [viewSchema, AppBskyEmbedExternal.viewSchema, AppBskyEmbedImages.viewSchema, AppBskyEmbedRecordWithMedia.viewSchema, AppBskyEmbedVideo.viewSchema], boolean>>, undefined>;
    indexedAt: v.FormattedStringSchema<"datetime">;
    readonly labels: v.OptionalSchema<v.ArraySchema<ComAtprotoLabelDefs.labelSchema>, undefined>;
    likeCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    quoteCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    replyCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    repostCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    uri: v.FormattedStringSchema<"at-uri">;
    /**
     * The record data itself.
     */
    value: v.UnknownSchema;
}>;
type main$schematype = typeof _mainSchema;
type view$schematype = typeof _viewSchema;
type viewBlocked$schematype = typeof _viewBlockedSchema;
type viewDetached$schematype = typeof _viewDetachedSchema;
type viewNotFound$schematype = typeof _viewNotFoundSchema;
type viewRecord$schematype = typeof _viewRecordSchema;
export interface mainSchema extends main$schematype {
}
export interface viewSchema extends view$schematype {
}
export interface viewBlockedSchema extends viewBlocked$schematype {
}
export interface viewDetachedSchema extends viewDetached$schematype {
}
export interface viewNotFoundSchema extends viewNotFound$schematype {
}
export interface viewRecordSchema extends viewRecord$schematype {
}
export declare const mainSchema: mainSchema;
export declare const viewSchema: viewSchema;
export declare const viewBlockedSchema: viewBlockedSchema;
export declare const viewDetachedSchema: viewDetachedSchema;
export declare const viewNotFoundSchema: viewNotFoundSchema;
export declare const viewRecordSchema: viewRecordSchema;
export interface Main extends v.InferInput<typeof mainSchema> {
}
export interface View extends v.InferInput<typeof viewSchema> {
}
export interface ViewBlocked extends v.InferInput<typeof viewBlockedSchema> {
}
export interface ViewDetached extends v.InferInput<typeof viewDetachedSchema> {
}
export interface ViewNotFound extends v.InferInput<typeof viewNotFoundSchema> {
}
export interface ViewRecord extends v.InferInput<typeof viewRecordSchema> {
}
export {};
//# sourceMappingURL=record.d.ts.map