import * as v from '@atcute/lexicons/validations';
import * as AppBskyActorDefs from '../actor/defs.js';
import * as AppBskyFeedDefs from '../feed/defs.js';
import * as AppBskyRichtextFacet from '../richtext/facet.js';
import * as ComAtprotoLabelDefs from '@atcute/atproto/types/label/defs';
declare const _curatelistSchema: v.LiteralSchema<"app.bsky.graph.defs#curatelist">;
declare const _listItemViewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.graph.defs#listItemView">, undefined>;
    readonly subject: AppBskyActorDefs.profileViewSchema;
    uri: v.FormattedStringSchema<"at-uri">;
}>;
declare const _listPurposeSchema: v.StringSchema<(string & {}) | "app.bsky.graph.defs#curatelist" | "app.bsky.graph.defs#modlist" | "app.bsky.graph.defs#referencelist">;
declare const _listViewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.graph.defs#listView">, undefined>;
    avatar: v.OptionalSchema<v.FormattedStringSchema<"uri">, undefined>;
    cid: v.FormattedStringSchema<"cid">;
    readonly creator: AppBskyActorDefs.profileViewSchema;
    /**
     * @maxLength 3000
     * @maxGraphemes 300
     */
    description: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 3000>, v.StringGraphemesConstraint<0, 300>]>, undefined>;
    readonly descriptionFacets: v.OptionalSchema<v.ArraySchema<AppBskyRichtextFacet.mainSchema>, undefined>;
    indexedAt: v.FormattedStringSchema<"datetime">;
    readonly labels: v.OptionalSchema<v.ArraySchema<ComAtprotoLabelDefs.labelSchema>, undefined>;
    /**
     * @minimum 0
     */
    listItemCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    /**
     * @minLength 1
     * @maxLength 64
     */
    name: v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<1, 64>]>;
    readonly purpose: listPurposeSchema;
    uri: v.FormattedStringSchema<"at-uri">;
    readonly viewer: v.OptionalSchema<listViewerStateSchema, undefined>;
}>;
declare const _listViewBasicSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.graph.defs#listViewBasic">, undefined>;
    avatar: v.OptionalSchema<v.FormattedStringSchema<"uri">, undefined>;
    cid: v.FormattedStringSchema<"cid">;
    indexedAt: v.OptionalSchema<v.FormattedStringSchema<"datetime">, undefined>;
    readonly labels: v.OptionalSchema<v.ArraySchema<ComAtprotoLabelDefs.labelSchema>, undefined>;
    /**
     * @minimum 0
     */
    listItemCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    /**
     * @minLength 1
     * @maxLength 64
     */
    name: v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<1, 64>]>;
    readonly purpose: listPurposeSchema;
    uri: v.FormattedStringSchema<"at-uri">;
    readonly viewer: v.OptionalSchema<listViewerStateSchema, undefined>;
}>;
declare const _listViewerStateSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.graph.defs#listViewerState">, undefined>;
    blocked: v.OptionalSchema<v.FormattedStringSchema<"at-uri">, undefined>;
    muted: v.OptionalSchema<v.BooleanSchema, undefined>;
}>;
declare const _modlistSchema: v.LiteralSchema<"app.bsky.graph.defs#modlist">;
declare const _notFoundActorSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.graph.defs#notFoundActor">, undefined>;
    actor: v.FormattedStringSchema<"at-identifier">;
    notFound: v.LiteralSchema<true>;
}>;
declare const _referencelistSchema: v.LiteralSchema<"app.bsky.graph.defs#referencelist">;
declare const _relationshipSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.graph.defs#relationship">, undefined>;
    did: v.FormattedStringSchema<"did">;
    /**
     * if the actor is followed by this DID, contains the AT-URI of the follow record
     */
    followedBy: v.OptionalSchema<v.FormattedStringSchema<"at-uri">, undefined>;
    /**
     * if the actor follows this DID, this is the AT-URI of the follow record
     */
    following: v.OptionalSchema<v.FormattedStringSchema<"at-uri">, undefined>;
}>;
declare const _starterPackViewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.graph.defs#starterPackView">, undefined>;
    cid: v.FormattedStringSchema<"cid">;
    readonly creator: AppBskyActorDefs.profileViewBasicSchema;
    /**
     * @maxLength 3
     */
    readonly feeds: v.OptionalSchema<v.SchemaWithConstraint<v.ArraySchema<AppBskyFeedDefs.generatorViewSchema>, readonly [v.ArrayLengthConstraint<0, 3>]>, undefined>;
    indexedAt: v.FormattedStringSchema<"datetime">;
    /**
     * @minimum 0
     */
    joinedAllTimeCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    /**
     * @minimum 0
     */
    joinedWeekCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    readonly labels: v.OptionalSchema<v.ArraySchema<ComAtprotoLabelDefs.labelSchema>, undefined>;
    readonly list: v.OptionalSchema<listViewBasicSchema, undefined>;
    /**
     * @maxLength 12
     */
    readonly listItemsSample: v.OptionalSchema<v.SchemaWithConstraint<v.ArraySchema<listItemViewSchema>, readonly [v.ArrayLengthConstraint<0, 12>]>, undefined>;
    record: v.UnknownSchema;
    uri: v.FormattedStringSchema<"at-uri">;
}>;
declare const _starterPackViewBasicSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.graph.defs#starterPackViewBasic">, undefined>;
    cid: v.FormattedStringSchema<"cid">;
    readonly creator: AppBskyActorDefs.profileViewBasicSchema;
    indexedAt: v.FormattedStringSchema<"datetime">;
    /**
     * @minimum 0
     */
    joinedAllTimeCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    /**
     * @minimum 0
     */
    joinedWeekCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    readonly labels: v.OptionalSchema<v.ArraySchema<ComAtprotoLabelDefs.labelSchema>, undefined>;
    /**
     * @minimum 0
     */
    listItemCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    record: v.UnknownSchema;
    uri: v.FormattedStringSchema<"at-uri">;
}>;
type curatelist$schematype = typeof _curatelistSchema;
type listItemView$schematype = typeof _listItemViewSchema;
type listPurpose$schematype = typeof _listPurposeSchema;
type listView$schematype = typeof _listViewSchema;
type listViewBasic$schematype = typeof _listViewBasicSchema;
type listViewerState$schematype = typeof _listViewerStateSchema;
type modlist$schematype = typeof _modlistSchema;
type notFoundActor$schematype = typeof _notFoundActorSchema;
type referencelist$schematype = typeof _referencelistSchema;
type relationship$schematype = typeof _relationshipSchema;
type starterPackView$schematype = typeof _starterPackViewSchema;
type starterPackViewBasic$schematype = typeof _starterPackViewBasicSchema;
export interface curatelistSchema extends curatelist$schematype {
}
export interface listItemViewSchema extends listItemView$schematype {
}
export interface listPurposeSchema extends listPurpose$schematype {
}
export interface listViewSchema extends listView$schematype {
}
export interface listViewBasicSchema extends listViewBasic$schematype {
}
export interface listViewerStateSchema extends listViewerState$schematype {
}
export interface modlistSchema extends modlist$schematype {
}
export interface notFoundActorSchema extends notFoundActor$schematype {
}
export interface referencelistSchema extends referencelist$schematype {
}
export interface relationshipSchema extends relationship$schematype {
}
export interface starterPackViewSchema extends starterPackView$schematype {
}
export interface starterPackViewBasicSchema extends starterPackViewBasic$schematype {
}
export declare const curatelistSchema: curatelistSchema;
export declare const listItemViewSchema: listItemViewSchema;
export declare const listPurposeSchema: listPurposeSchema;
export declare const listViewSchema: listViewSchema;
export declare const listViewBasicSchema: listViewBasicSchema;
export declare const listViewerStateSchema: listViewerStateSchema;
export declare const modlistSchema: modlistSchema;
export declare const notFoundActorSchema: notFoundActorSchema;
export declare const referencelistSchema: referencelistSchema;
export declare const relationshipSchema: relationshipSchema;
export declare const starterPackViewSchema: starterPackViewSchema;
export declare const starterPackViewBasicSchema: starterPackViewBasicSchema;
export type Curatelist = v.InferInput<typeof curatelistSchema>;
export interface ListItemView extends v.InferInput<typeof listItemViewSchema> {
}
export type ListPurpose = v.InferInput<typeof listPurposeSchema>;
export interface ListView extends v.InferInput<typeof listViewSchema> {
}
export interface ListViewBasic extends v.InferInput<typeof listViewBasicSchema> {
}
export interface ListViewerState extends v.InferInput<typeof listViewerStateSchema> {
}
export type Modlist = v.InferInput<typeof modlistSchema>;
export interface NotFoundActor extends v.InferInput<typeof notFoundActorSchema> {
}
export type Referencelist = v.InferInput<typeof referencelistSchema>;
export interface Relationship extends v.InferInput<typeof relationshipSchema> {
}
export interface StarterPackView extends v.InferInput<typeof starterPackViewSchema> {
}
export interface StarterPackViewBasic extends v.InferInput<typeof starterPackViewBasicSchema> {
}
export {};
//# sourceMappingURL=defs.d.ts.map