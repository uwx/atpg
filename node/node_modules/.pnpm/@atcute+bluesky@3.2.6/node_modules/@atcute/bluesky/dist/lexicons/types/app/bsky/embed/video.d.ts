import * as v from '@atcute/lexicons/validations';
import * as AppBskyEmbedDefs from './defs.js';
declare const _captionSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.embed.video#caption">, undefined>;
    /**
     * @accept text/vtt
     * @maxSize 20000
     */
    file: v.BlobSchema;
    lang: v.FormattedStringSchema<"language">;
}>;
declare const _mainSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.embed.video">, undefined>;
    /**
     * Alt text description of the video, for accessibility.
     * @maxLength 10000
     * @maxGraphemes 1000
     */
    alt: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 10000>, v.StringGraphemesConstraint<0, 1000>]>, undefined>;
    readonly aspectRatio: v.OptionalSchema<AppBskyEmbedDefs.aspectRatioSchema, undefined>;
    /**
     * @maxLength 20
     */
    readonly captions: v.OptionalSchema<v.SchemaWithConstraint<v.ArraySchema<captionSchema>, readonly [v.ArrayLengthConstraint<0, 20>]>, undefined>;
    /**
     * The mp4 video file. May be up to 100mb, formerly limited to 50mb.
     * @accept video/mp4
     * @maxSize 100000000
     */
    video: v.BlobSchema;
}>;
declare const _viewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.embed.video#view">, undefined>;
    /**
     * @maxLength 10000
     * @maxGraphemes 1000
     */
    alt: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 10000>, v.StringGraphemesConstraint<0, 1000>]>, undefined>;
    readonly aspectRatio: v.OptionalSchema<AppBskyEmbedDefs.aspectRatioSchema, undefined>;
    cid: v.FormattedStringSchema<"cid">;
    playlist: v.FormattedStringSchema<"uri">;
    thumbnail: v.OptionalSchema<v.FormattedStringSchema<"uri">, undefined>;
}>;
type caption$schematype = typeof _captionSchema;
type main$schematype = typeof _mainSchema;
type view$schematype = typeof _viewSchema;
export interface captionSchema extends caption$schematype {
}
export interface mainSchema extends main$schematype {
}
export interface viewSchema extends view$schematype {
}
export declare const captionSchema: captionSchema;
export declare const mainSchema: mainSchema;
export declare const viewSchema: viewSchema;
export interface Caption extends v.InferInput<typeof captionSchema> {
}
export interface Main extends v.InferInput<typeof mainSchema> {
}
export interface View extends v.InferInput<typeof viewSchema> {
}
export {};
//# sourceMappingURL=video.d.ts.map