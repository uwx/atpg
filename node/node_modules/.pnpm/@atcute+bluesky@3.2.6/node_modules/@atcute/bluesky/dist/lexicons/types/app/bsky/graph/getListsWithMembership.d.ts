import * as v from '@atcute/lexicons/validations';
import * as AppBskyGraphDefs from './defs.js';
declare const _listWithMembershipSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.graph.getListsWithMembership#listWithMembership">, undefined>;
    readonly list: AppBskyGraphDefs.listViewSchema;
    readonly listItem: v.OptionalSchema<AppBskyGraphDefs.listItemViewSchema, undefined>;
}>;
declare const _mainSchema: v.XRPCQueryMetadata<v.ObjectSchema<{
    /**
     * The account (actor) to check for membership.
     */
    actor: v.FormattedStringSchema<"at-identifier">;
    cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
    /**
     * @minimum 1
     * @maximum 100
     * @default 50
     */
    limit: v.OptionalSchema<v.SchemaWithConstraint<v.IntegerSchema, readonly [v.IntegerRangeConstraint<1, 100>]>, 50>;
    /**
     * Optional filter by list purpose. If not specified, all supported types are returned.
     */
    purposes: v.OptionalSchema<v.ArraySchema<v.StringSchema<(string & {}) | "curatelist" | "modlist">>, undefined>;
}>, {
    type: "lex";
    schema: v.ObjectSchema<{
        cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
        readonly listsWithMembership: v.ArraySchema<listWithMembershipSchema>;
    }>;
}, "app.bsky.graph.getListsWithMembership">;
type listWithMembership$schematype = typeof _listWithMembershipSchema;
type main$schematype = typeof _mainSchema;
export interface listWithMembershipSchema extends listWithMembership$schematype {
}
export interface mainSchema extends main$schematype {
}
export declare const listWithMembershipSchema: listWithMembershipSchema;
export declare const mainSchema: mainSchema;
export interface ListWithMembership extends v.InferInput<typeof listWithMembershipSchema> {
}
export interface $params extends v.InferInput<mainSchema['params']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCQueries {
        'app.bsky.graph.getListsWithMembership': mainSchema;
    }
}
export {};
//# sourceMappingURL=getListsWithMembership.d.ts.map