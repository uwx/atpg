import * as v from '@atcute/lexicons/validations';
import * as AppBskyFeedDefs from './defs.js';
declare const _mainSchema: v.XRPCQueryMetadata<v.ObjectSchema<{
    cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
    /**
     * Reference to feed generator record describing the specific feed being requested.
     */
    feed: v.FormattedStringSchema<"at-uri">;
    /**
     * @minimum 1
     * @maximum 100
     * @default 50
     */
    limit: v.OptionalSchema<v.SchemaWithConstraint<v.IntegerSchema, readonly [v.IntegerRangeConstraint<1, 100>]>, 50>;
}>, {
    type: "lex";
    schema: v.ObjectSchema<{
        cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
        readonly feed: v.ArraySchema<AppBskyFeedDefs.skeletonFeedPostSchema>;
        /**
         * Unique identifier per request that may be passed back alongside interactions.
         * @maxLength 100
         */
        reqId: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 100>]>, undefined>;
    }>;
}, "app.bsky.feed.getFeedSkeleton">;
type main$schematype = typeof _mainSchema;
export interface mainSchema extends main$schematype {
}
export declare const mainSchema: mainSchema;
export interface $params extends v.InferInput<mainSchema['params']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCQueries {
        'app.bsky.feed.getFeedSkeleton': mainSchema;
    }
}
export {};
//# sourceMappingURL=getFeedSkeleton.d.ts.map