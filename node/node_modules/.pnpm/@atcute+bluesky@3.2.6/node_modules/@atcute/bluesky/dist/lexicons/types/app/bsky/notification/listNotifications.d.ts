import * as v from '@atcute/lexicons/validations';
import * as AppBskyActorDefs from '../actor/defs.js';
import * as ComAtprotoLabelDefs from '@atcute/atproto/types/label/defs';
declare const _mainSchema: v.XRPCQueryMetadata<v.ObjectSchema<{
    cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
    /**
     * @minimum 1
     * @maximum 100
     * @default 50
     */
    limit: v.OptionalSchema<v.SchemaWithConstraint<v.IntegerSchema, readonly [v.IntegerRangeConstraint<1, 100>]>, 50>;
    priority: v.OptionalSchema<v.BooleanSchema, undefined>;
    /**
     * Notification reasons to include in response.
     */
    reasons: v.OptionalSchema<v.ArraySchema<v.StringSchema<string>>, undefined>;
    seenAt: v.OptionalSchema<v.FormattedStringSchema<"datetime">, undefined>;
}>, {
    type: "lex";
    schema: v.ObjectSchema<{
        cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
        readonly notifications: v.ArraySchema<notificationSchema>;
        priority: v.OptionalSchema<v.BooleanSchema, undefined>;
        seenAt: v.OptionalSchema<v.FormattedStringSchema<"datetime">, undefined>;
    }>;
}, "app.bsky.notification.listNotifications">;
declare const _notificationSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.notification.listNotifications#notification">, undefined>;
    readonly author: AppBskyActorDefs.profileViewSchema;
    cid: v.FormattedStringSchema<"cid">;
    indexedAt: v.FormattedStringSchema<"datetime">;
    isRead: v.BooleanSchema;
    readonly labels: v.OptionalSchema<v.ArraySchema<ComAtprotoLabelDefs.labelSchema>, undefined>;
    /**
     * The reason why this notification was delivered - e.g. your post was liked, or you received a new follower.
     */
    reason: v.StringSchema<"like" | (string & {}) | "repost" | "reply" | "follow" | "mention" | "quote" | "unverified" | "verified" | "like-via-repost" | "repost-via-repost" | "starterpack-joined" | "subscribed-post">;
    reasonSubject: v.OptionalSchema<v.FormattedStringSchema<"at-uri">, undefined>;
    record: v.UnknownSchema;
    uri: v.FormattedStringSchema<"at-uri">;
}>;
type main$schematype = typeof _mainSchema;
type notification$schematype = typeof _notificationSchema;
export interface mainSchema extends main$schematype {
}
export interface notificationSchema extends notification$schematype {
}
export declare const mainSchema: mainSchema;
export declare const notificationSchema: notificationSchema;
export interface Notification extends v.InferInput<typeof notificationSchema> {
}
export interface $params extends v.InferInput<mainSchema['params']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCQueries {
        'app.bsky.notification.listNotifications': mainSchema;
    }
}
export {};
//# sourceMappingURL=listNotifications.d.ts.map