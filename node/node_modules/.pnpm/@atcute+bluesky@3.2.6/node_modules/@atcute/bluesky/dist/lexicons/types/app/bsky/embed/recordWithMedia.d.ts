import * as v from '@atcute/lexicons/validations';
import * as AppBskyEmbedExternal from './external.js';
import * as AppBskyEmbedImages from './images.js';
import * as AppBskyEmbedRecord from './record.js';
import * as AppBskyEmbedVideo from './video.js';
declare const _mainSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.embed.recordWithMedia">, undefined>;
    readonly media: v.VariantSchema<readonly [AppBskyEmbedExternal.mainSchema, AppBskyEmbedImages.mainSchema, AppBskyEmbedVideo.mainSchema], boolean>;
    readonly record: AppBskyEmbedRecord.mainSchema;
}>;
declare const _viewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.embed.recordWithMedia#view">, undefined>;
    readonly media: v.VariantSchema<readonly [AppBskyEmbedExternal.viewSchema, AppBskyEmbedImages.viewSchema, AppBskyEmbedVideo.viewSchema], boolean>;
    readonly record: AppBskyEmbedRecord.viewSchema;
}>;
type main$schematype = typeof _mainSchema;
type view$schematype = typeof _viewSchema;
export interface mainSchema extends main$schematype {
}
export interface viewSchema extends view$schematype {
}
export declare const mainSchema: mainSchema;
export declare const viewSchema: viewSchema;
export interface Main extends v.InferInput<typeof mainSchema> {
}
export interface View extends v.InferInput<typeof viewSchema> {
}
export {};
//# sourceMappingURL=recordWithMedia.d.ts.map