import * as v from '@atcute/lexicons/validations';
import * as AppBskyActorDefs from '../actor/defs.js';
const _likeSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.getLikes#like')),
    get actor() {
        return AppBskyActorDefs.profileViewSchema;
    },
    createdAt: /*#__PURE__*/ v.datetimeString(),
    indexedAt: /*#__PURE__*/ v.datetimeString(),
});
const _mainSchema = /*#__PURE__*/ v.query('app.bsky.feed.getLikes', {
    params: /*#__PURE__*/ v.object({
        /**
         * CID of the subject record (aka, specific version of record), to filter likes.
         */
        cid: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.cidString()),
        cursor: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.string()),
        /**
         * @minimum 1
         * @maximum 100
         * @default 50
         */
        limit: /*#__PURE__*/ v.optional(
        /*#__PURE__*/ v.constrain(/*#__PURE__*/ v.integer(), [/*#__PURE__*/ v.integerRange(1, 100)]), 50),
        /**
         * AT-URI of the subject (eg, a post record).
         */
        uri: /*#__PURE__*/ v.resourceUriString(),
    }),
    output: {
        type: 'lex',
        schema: /*#__PURE__*/ v.object({
            cid: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.cidString()),
            cursor: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.string()),
            get likes() {
                return /*#__PURE__*/ v.array(likeSchema);
            },
            uri: /*#__PURE__*/ v.resourceUriString(),
        }),
    },
});
export const likeSchema = _likeSchema;
export const mainSchema = _mainSchema;
//# sourceMappingURL=getLikes.js.map