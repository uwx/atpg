import * as v from '@atcute/lexicons/validations';
import * as AppBskyGraphDefs from './defs.js';
declare const _mainSchema: v.XRPCQueryMetadata<v.ObjectSchema<{
    /**
     * Primary account requesting relationships for.
     */
    actor: v.FormattedStringSchema<"at-identifier">;
    /**
     * List of 'other' accounts to be related back to the primary.
     * @maxLength 30
     */
    others: v.OptionalSchema<v.SchemaWithConstraint<v.ArraySchema<v.FormattedStringSchema<"at-identifier">>, readonly [v.ArrayLengthConstraint<0, 30>]>, undefined>;
}>, {
    type: "lex";
    schema: v.ObjectSchema<{
        actor: v.OptionalSchema<v.FormattedStringSchema<"did">, undefined>;
        readonly relationships: v.ArraySchema<v.VariantSchema<readonly [AppBskyGraphDefs.notFoundActorSchema, AppBskyGraphDefs.relationshipSchema], boolean>>;
    }>;
}, "app.bsky.graph.getRelationships">;
type main$schematype = typeof _mainSchema;
export interface mainSchema extends main$schematype {
}
export declare const mainSchema: mainSchema;
export interface $params extends v.InferInput<mainSchema['params']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCQueries {
        'app.bsky.graph.getRelationships': mainSchema;
    }
}
export {};
//# sourceMappingURL=getRelationships.d.ts.map