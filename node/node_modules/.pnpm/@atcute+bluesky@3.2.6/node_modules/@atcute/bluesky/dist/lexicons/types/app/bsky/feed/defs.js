import * as v from '@atcute/lexicons/validations';
import * as AppBskyActorDefs from '../actor/defs.js';
import * as AppBskyEmbedExternal from '../embed/external.js';
import * as AppBskyEmbedImages from '../embed/images.js';
import * as AppBskyEmbedRecord from '../embed/record.js';
import * as AppBskyEmbedRecordWithMedia from '../embed/recordWithMedia.js';
import * as AppBskyEmbedVideo from '../embed/video.js';
import * as AppBskyGraphDefs from '../graph/defs.js';
import * as AppBskyRichtextFacet from '../richtext/facet.js';
import * as ComAtprotoLabelDefs from '@atcute/atproto/types/label/defs';
const _blockedAuthorSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.defs#blockedAuthor')),
    did: /*#__PURE__*/ v.didString(),
    get viewer() {
        return /*#__PURE__*/ v.optional(AppBskyActorDefs.viewerStateSchema);
    },
});
const _blockedPostSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.defs#blockedPost')),
    get author() {
        return blockedAuthorSchema;
    },
    blocked: /*#__PURE__*/ v.literal(true),
    uri: /*#__PURE__*/ v.resourceUriString(),
});
const _clickthroughAuthorSchema = /*#__PURE__*/ v.literal('app.bsky.feed.defs#clickthroughAuthor');
const _clickthroughEmbedSchema = /*#__PURE__*/ v.literal('app.bsky.feed.defs#clickthroughEmbed');
const _clickthroughItemSchema = /*#__PURE__*/ v.literal('app.bsky.feed.defs#clickthroughItem');
const _clickthroughReposterSchema = /*#__PURE__*/ v.literal('app.bsky.feed.defs#clickthroughReposter');
const _contentModeUnspecifiedSchema = /*#__PURE__*/ v.literal('app.bsky.feed.defs#contentModeUnspecified');
const _contentModeVideoSchema = /*#__PURE__*/ v.literal('app.bsky.feed.defs#contentModeVideo');
const _feedViewPostSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.defs#feedViewPost')),
    /**
     * Context provided by feed generator that may be passed back alongside interactions.
     * @maxLength 2000
     */
    feedContext: /*#__PURE__*/ v.optional(
    /*#__PURE__*/ v.constrain(/*#__PURE__*/ v.string(), [/*#__PURE__*/ v.stringLength(0, 2000)])),
    get post() {
        return postViewSchema;
    },
    get reason() {
        return /*#__PURE__*/ v.optional(/*#__PURE__*/ v.variant([reasonPinSchema, reasonRepostSchema]));
    },
    get reply() {
        return /*#__PURE__*/ v.optional(replyRefSchema);
    },
    /**
     * Unique identifier per request that may be passed back alongside interactions.
     * @maxLength 100
     */
    reqId: /*#__PURE__*/ v.optional(
    /*#__PURE__*/ v.constrain(/*#__PURE__*/ v.string(), [/*#__PURE__*/ v.stringLength(0, 100)])),
});
const _generatorViewSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.defs#generatorView')),
    acceptsInteractions: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.boolean()),
    avatar: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.genericUriString()),
    cid: /*#__PURE__*/ v.cidString(),
    contentMode: /*#__PURE__*/ v.optional(
    /*#__PURE__*/ v.string()),
    get creator() {
        return AppBskyActorDefs.profileViewSchema;
    },
    /**
     * @maxLength 3000
     * @maxGraphemes 300
     */
    description: /*#__PURE__*/ v.optional(
    /*#__PURE__*/ v.constrain(/*#__PURE__*/ v.string(), [
        /*#__PURE__*/ v.stringLength(0, 3000),
        /*#__PURE__*/ v.stringGraphemes(0, 300),
    ])),
    get descriptionFacets() {
        return /*#__PURE__*/ v.optional(/*#__PURE__*/ v.array(AppBskyRichtextFacet.mainSchema));
    },
    did: /*#__PURE__*/ v.didString(),
    displayName: /*#__PURE__*/ v.string(),
    indexedAt: /*#__PURE__*/ v.datetimeString(),
    get labels() {
        return /*#__PURE__*/ v.optional(/*#__PURE__*/ v.array(ComAtprotoLabelDefs.labelSchema));
    },
    /**
     * @minimum 0
     */
    likeCount: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.integer()),
    uri: /*#__PURE__*/ v.resourceUriString(),
    get viewer() {
        return /*#__PURE__*/ v.optional(generatorViewerStateSchema);
    },
});
const _generatorViewerStateSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.defs#generatorViewerState')),
    like: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.resourceUriString()),
});
const _interactionSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.defs#interaction')),
    event: /*#__PURE__*/ v.optional(
    /*#__PURE__*/ v.string()),
    /**
     * Context on a feed item that was originally supplied by the feed generator on getFeedSkeleton.
     * @maxLength 2000
     */
    feedContext: /*#__PURE__*/ v.optional(
    /*#__PURE__*/ v.constrain(/*#__PURE__*/ v.string(), [/*#__PURE__*/ v.stringLength(0, 2000)])),
    item: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.resourceUriString()),
    /**
     * Unique identifier per request that may be passed back alongside interactions.
     * @maxLength 100
     */
    reqId: /*#__PURE__*/ v.optional(
    /*#__PURE__*/ v.constrain(/*#__PURE__*/ v.string(), [/*#__PURE__*/ v.stringLength(0, 100)])),
});
const _interactionLikeSchema = /*#__PURE__*/ v.literal('app.bsky.feed.defs#interactionLike');
const _interactionQuoteSchema = /*#__PURE__*/ v.literal('app.bsky.feed.defs#interactionQuote');
const _interactionReplySchema = /*#__PURE__*/ v.literal('app.bsky.feed.defs#interactionReply');
const _interactionRepostSchema = /*#__PURE__*/ v.literal('app.bsky.feed.defs#interactionRepost');
const _interactionSeenSchema = /*#__PURE__*/ v.literal('app.bsky.feed.defs#interactionSeen');
const _interactionShareSchema = /*#__PURE__*/ v.literal('app.bsky.feed.defs#interactionShare');
const _notFoundPostSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.defs#notFoundPost')),
    notFound: /*#__PURE__*/ v.literal(true),
    uri: /*#__PURE__*/ v.resourceUriString(),
});
const _postViewSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.defs#postView')),
    get author() {
        return AppBskyActorDefs.profileViewBasicSchema;
    },
    bookmarkCount: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.integer()),
    cid: /*#__PURE__*/ v.cidString(),
    get embed() {
        return /*#__PURE__*/ v.optional(
        /*#__PURE__*/ v.variant([
            AppBskyEmbedExternal.viewSchema,
            AppBskyEmbedImages.viewSchema,
            AppBskyEmbedRecord.viewSchema,
            AppBskyEmbedRecordWithMedia.viewSchema,
            AppBskyEmbedVideo.viewSchema,
        ]));
    },
    indexedAt: /*#__PURE__*/ v.datetimeString(),
    get labels() {
        return /*#__PURE__*/ v.optional(/*#__PURE__*/ v.array(ComAtprotoLabelDefs.labelSchema));
    },
    likeCount: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.integer()),
    quoteCount: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.integer()),
    record: /*#__PURE__*/ v.unknown(),
    replyCount: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.integer()),
    repostCount: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.integer()),
    get threadgate() {
        return /*#__PURE__*/ v.optional(threadgateViewSchema);
    },
    uri: /*#__PURE__*/ v.resourceUriString(),
    get viewer() {
        return /*#__PURE__*/ v.optional(viewerStateSchema);
    },
});
const _reasonPinSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.defs#reasonPin')),
});
const _reasonRepostSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.defs#reasonRepost')),
    get by() {
        return AppBskyActorDefs.profileViewBasicSchema;
    },
    cid: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.cidString()),
    indexedAt: /*#__PURE__*/ v.datetimeString(),
    uri: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.resourceUriString()),
});
const _replyRefSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.defs#replyRef')),
    /**
     * When parent is a reply to another post, this is the author of that post.
     */
    get grandparentAuthor() {
        return /*#__PURE__*/ v.optional(AppBskyActorDefs.profileViewBasicSchema);
    },
    get parent() {
        return /*#__PURE__*/ v.variant([blockedPostSchema, notFoundPostSchema, postViewSchema]);
    },
    get root() {
        return /*#__PURE__*/ v.variant([blockedPostSchema, notFoundPostSchema, postViewSchema]);
    },
});
const _requestLessSchema = /*#__PURE__*/ v.literal('app.bsky.feed.defs#requestLess');
const _requestMoreSchema = /*#__PURE__*/ v.literal('app.bsky.feed.defs#requestMore');
const _skeletonFeedPostSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.defs#skeletonFeedPost')),
    /**
     * Context that will be passed through to client and may be passed to feed generator back alongside interactions.
     * @maxLength 2000
     */
    feedContext: /*#__PURE__*/ v.optional(
    /*#__PURE__*/ v.constrain(/*#__PURE__*/ v.string(), [/*#__PURE__*/ v.stringLength(0, 2000)])),
    post: /*#__PURE__*/ v.resourceUriString(),
    get reason() {
        return /*#__PURE__*/ v.optional(
        /*#__PURE__*/ v.variant([skeletonReasonPinSchema, skeletonReasonRepostSchema]));
    },
});
const _skeletonReasonPinSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.defs#skeletonReasonPin')),
});
const _skeletonReasonRepostSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.defs#skeletonReasonRepost')),
    repost: /*#__PURE__*/ v.resourceUriString(),
});
const _threadContextSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.defs#threadContext')),
    rootAuthorLike: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.resourceUriString()),
});
const _threadViewPostSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.defs#threadViewPost')),
    get parent() {
        return /*#__PURE__*/ v.optional(
        /*#__PURE__*/ v.variant([blockedPostSchema, notFoundPostSchema, threadViewPostSchema]));
    },
    get post() {
        return postViewSchema;
    },
    get replies() {
        return /*#__PURE__*/ v.optional(
        /*#__PURE__*/ v.array(
        /*#__PURE__*/ v.variant([blockedPostSchema, notFoundPostSchema, threadViewPostSchema])));
    },
    get threadContext() {
        return /*#__PURE__*/ v.optional(threadContextSchema);
    },
});
const _threadgateViewSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.defs#threadgateView')),
    cid: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.cidString()),
    get lists() {
        return /*#__PURE__*/ v.optional(/*#__PURE__*/ v.array(AppBskyGraphDefs.listViewBasicSchema));
    },
    record: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.unknown()),
    uri: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.resourceUriString()),
});
const _viewerStateSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('app.bsky.feed.defs#viewerState')),
    bookmarked: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.boolean()),
    embeddingDisabled: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.boolean()),
    like: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.resourceUriString()),
    pinned: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.boolean()),
    replyDisabled: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.boolean()),
    repost: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.resourceUriString()),
    threadMuted: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.boolean()),
});
export const blockedAuthorSchema = _blockedAuthorSchema;
export const blockedPostSchema = _blockedPostSchema;
export const clickthroughAuthorSchema = _clickthroughAuthorSchema;
export const clickthroughEmbedSchema = _clickthroughEmbedSchema;
export const clickthroughItemSchema = _clickthroughItemSchema;
export const clickthroughReposterSchema = _clickthroughReposterSchema;
export const contentModeUnspecifiedSchema = _contentModeUnspecifiedSchema;
export const contentModeVideoSchema = _contentModeVideoSchema;
export const feedViewPostSchema = _feedViewPostSchema;
export const generatorViewSchema = _generatorViewSchema;
export const generatorViewerStateSchema = _generatorViewerStateSchema;
export const interactionSchema = _interactionSchema;
export const interactionLikeSchema = _interactionLikeSchema;
export const interactionQuoteSchema = _interactionQuoteSchema;
export const interactionReplySchema = _interactionReplySchema;
export const interactionRepostSchema = _interactionRepostSchema;
export const interactionSeenSchema = _interactionSeenSchema;
export const interactionShareSchema = _interactionShareSchema;
export const notFoundPostSchema = _notFoundPostSchema;
export const postViewSchema = _postViewSchema;
export const reasonPinSchema = _reasonPinSchema;
export const reasonRepostSchema = _reasonRepostSchema;
export const replyRefSchema = _replyRefSchema;
export const requestLessSchema = _requestLessSchema;
export const requestMoreSchema = _requestMoreSchema;
export const skeletonFeedPostSchema = _skeletonFeedPostSchema;
export const skeletonReasonPinSchema = _skeletonReasonPinSchema;
export const skeletonReasonRepostSchema = _skeletonReasonRepostSchema;
export const threadContextSchema = _threadContextSchema;
export const threadViewPostSchema = _threadViewPostSchema;
export const threadgateViewSchema = _threadgateViewSchema;
export const viewerStateSchema = _viewerStateSchema;
//# sourceMappingURL=defs.js.map