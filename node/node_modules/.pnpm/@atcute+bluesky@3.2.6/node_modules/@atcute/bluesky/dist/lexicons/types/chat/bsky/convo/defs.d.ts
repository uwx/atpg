import * as v from '@atcute/lexicons/validations';
import * as AppBskyEmbedRecord from '../../../app/bsky/embed/record.js';
import * as AppBskyRichtextFacet from '../../../app/bsky/richtext/facet.js';
import * as ChatBskyActorDefs from '../actor/defs.js';
declare const _convoViewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#convoView">, undefined>;
    id: v.StringSchema<string>;
    readonly lastMessage: v.OptionalSchema<v.VariantSchema<readonly [deletedMessageViewSchema, messageViewSchema], boolean>, undefined>;
    readonly lastReaction: v.OptionalSchema<v.VariantSchema<readonly [messageAndReactionViewSchema], boolean>, undefined>;
    readonly members: v.ArraySchema<ChatBskyActorDefs.profileViewBasicSchema>;
    muted: v.BooleanSchema;
    rev: v.StringSchema<string>;
    status: v.OptionalSchema<v.StringSchema<(string & {}) | "accepted" | "request">, undefined>;
    unreadCount: v.IntegerSchema;
}>;
declare const _deletedMessageViewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#deletedMessageView">, undefined>;
    id: v.StringSchema<string>;
    rev: v.StringSchema<string>;
    readonly sender: messageViewSenderSchema;
    sentAt: v.FormattedStringSchema<"datetime">;
}>;
declare const _logAcceptConvoSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#logAcceptConvo">, undefined>;
    convoId: v.StringSchema<string>;
    rev: v.StringSchema<string>;
}>;
declare const _logAddReactionSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#logAddReaction">, undefined>;
    convoId: v.StringSchema<string>;
    readonly message: v.VariantSchema<readonly [deletedMessageViewSchema, messageViewSchema], boolean>;
    readonly reaction: reactionViewSchema;
    rev: v.StringSchema<string>;
}>;
declare const _logBeginConvoSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#logBeginConvo">, undefined>;
    convoId: v.StringSchema<string>;
    rev: v.StringSchema<string>;
}>;
declare const _logCreateMessageSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#logCreateMessage">, undefined>;
    convoId: v.StringSchema<string>;
    readonly message: v.VariantSchema<readonly [deletedMessageViewSchema, messageViewSchema], boolean>;
    rev: v.StringSchema<string>;
}>;
declare const _logDeleteMessageSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#logDeleteMessage">, undefined>;
    convoId: v.StringSchema<string>;
    readonly message: v.VariantSchema<readonly [deletedMessageViewSchema, messageViewSchema], boolean>;
    rev: v.StringSchema<string>;
}>;
declare const _logLeaveConvoSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#logLeaveConvo">, undefined>;
    convoId: v.StringSchema<string>;
    rev: v.StringSchema<string>;
}>;
declare const _logMuteConvoSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#logMuteConvo">, undefined>;
    convoId: v.StringSchema<string>;
    rev: v.StringSchema<string>;
}>;
declare const _logReadMessageSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#logReadMessage">, undefined>;
    convoId: v.StringSchema<string>;
    readonly message: v.VariantSchema<readonly [deletedMessageViewSchema, messageViewSchema], boolean>;
    rev: v.StringSchema<string>;
}>;
declare const _logRemoveReactionSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#logRemoveReaction">, undefined>;
    convoId: v.StringSchema<string>;
    readonly message: v.VariantSchema<readonly [deletedMessageViewSchema, messageViewSchema], boolean>;
    readonly reaction: reactionViewSchema;
    rev: v.StringSchema<string>;
}>;
declare const _logUnmuteConvoSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#logUnmuteConvo">, undefined>;
    convoId: v.StringSchema<string>;
    rev: v.StringSchema<string>;
}>;
declare const _messageAndReactionViewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#messageAndReactionView">, undefined>;
    readonly message: messageViewSchema;
    readonly reaction: reactionViewSchema;
}>;
declare const _messageInputSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#messageInput">, undefined>;
    readonly embed: v.OptionalSchema<v.VariantSchema<readonly [AppBskyEmbedRecord.mainSchema], boolean>, undefined>;
    /**
     * Annotations of text (mentions, URLs, hashtags, etc)
     */
    readonly facets: v.OptionalSchema<v.ArraySchema<AppBskyRichtextFacet.mainSchema>, undefined>;
    /**
     * @maxLength 10000
     * @maxGraphemes 1000
     */
    text: v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 10000>, v.StringGraphemesConstraint<0, 1000>]>;
}>;
declare const _messageRefSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#messageRef">, undefined>;
    convoId: v.StringSchema<string>;
    did: v.FormattedStringSchema<"did">;
    messageId: v.StringSchema<string>;
}>;
declare const _messageViewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#messageView">, undefined>;
    readonly embed: v.OptionalSchema<v.VariantSchema<readonly [AppBskyEmbedRecord.viewSchema], boolean>, undefined>;
    /**
     * Annotations of text (mentions, URLs, hashtags, etc)
     */
    readonly facets: v.OptionalSchema<v.ArraySchema<AppBskyRichtextFacet.mainSchema>, undefined>;
    id: v.StringSchema<string>;
    /**
     * Reactions to this message, in ascending order of creation time.
     */
    readonly reactions: v.OptionalSchema<v.ArraySchema<reactionViewSchema>, undefined>;
    rev: v.StringSchema<string>;
    readonly sender: messageViewSenderSchema;
    sentAt: v.FormattedStringSchema<"datetime">;
    /**
     * @maxLength 10000
     * @maxGraphemes 1000
     */
    text: v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 10000>, v.StringGraphemesConstraint<0, 1000>]>;
}>;
declare const _messageViewSenderSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#messageViewSender">, undefined>;
    did: v.FormattedStringSchema<"did">;
}>;
declare const _reactionViewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#reactionView">, undefined>;
    createdAt: v.FormattedStringSchema<"datetime">;
    readonly sender: reactionViewSenderSchema;
    value: v.StringSchema<string>;
}>;
declare const _reactionViewSenderSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.defs#reactionViewSender">, undefined>;
    did: v.FormattedStringSchema<"did">;
}>;
type convoView$schematype = typeof _convoViewSchema;
type deletedMessageView$schematype = typeof _deletedMessageViewSchema;
type logAcceptConvo$schematype = typeof _logAcceptConvoSchema;
type logAddReaction$schematype = typeof _logAddReactionSchema;
type logBeginConvo$schematype = typeof _logBeginConvoSchema;
type logCreateMessage$schematype = typeof _logCreateMessageSchema;
type logDeleteMessage$schematype = typeof _logDeleteMessageSchema;
type logLeaveConvo$schematype = typeof _logLeaveConvoSchema;
type logMuteConvo$schematype = typeof _logMuteConvoSchema;
type logReadMessage$schematype = typeof _logReadMessageSchema;
type logRemoveReaction$schematype = typeof _logRemoveReactionSchema;
type logUnmuteConvo$schematype = typeof _logUnmuteConvoSchema;
type messageAndReactionView$schematype = typeof _messageAndReactionViewSchema;
type messageInput$schematype = typeof _messageInputSchema;
type messageRef$schematype = typeof _messageRefSchema;
type messageView$schematype = typeof _messageViewSchema;
type messageViewSender$schematype = typeof _messageViewSenderSchema;
type reactionView$schematype = typeof _reactionViewSchema;
type reactionViewSender$schematype = typeof _reactionViewSenderSchema;
export interface convoViewSchema extends convoView$schematype {
}
export interface deletedMessageViewSchema extends deletedMessageView$schematype {
}
export interface logAcceptConvoSchema extends logAcceptConvo$schematype {
}
export interface logAddReactionSchema extends logAddReaction$schematype {
}
export interface logBeginConvoSchema extends logBeginConvo$schematype {
}
export interface logCreateMessageSchema extends logCreateMessage$schematype {
}
export interface logDeleteMessageSchema extends logDeleteMessage$schematype {
}
export interface logLeaveConvoSchema extends logLeaveConvo$schematype {
}
export interface logMuteConvoSchema extends logMuteConvo$schematype {
}
export interface logReadMessageSchema extends logReadMessage$schematype {
}
export interface logRemoveReactionSchema extends logRemoveReaction$schematype {
}
export interface logUnmuteConvoSchema extends logUnmuteConvo$schematype {
}
export interface messageAndReactionViewSchema extends messageAndReactionView$schematype {
}
export interface messageInputSchema extends messageInput$schematype {
}
export interface messageRefSchema extends messageRef$schematype {
}
export interface messageViewSchema extends messageView$schematype {
}
export interface messageViewSenderSchema extends messageViewSender$schematype {
}
export interface reactionViewSchema extends reactionView$schematype {
}
export interface reactionViewSenderSchema extends reactionViewSender$schematype {
}
export declare const convoViewSchema: convoViewSchema;
export declare const deletedMessageViewSchema: deletedMessageViewSchema;
export declare const logAcceptConvoSchema: logAcceptConvoSchema;
export declare const logAddReactionSchema: logAddReactionSchema;
export declare const logBeginConvoSchema: logBeginConvoSchema;
export declare const logCreateMessageSchema: logCreateMessageSchema;
export declare const logDeleteMessageSchema: logDeleteMessageSchema;
export declare const logLeaveConvoSchema: logLeaveConvoSchema;
export declare const logMuteConvoSchema: logMuteConvoSchema;
export declare const logReadMessageSchema: logReadMessageSchema;
export declare const logRemoveReactionSchema: logRemoveReactionSchema;
export declare const logUnmuteConvoSchema: logUnmuteConvoSchema;
export declare const messageAndReactionViewSchema: messageAndReactionViewSchema;
export declare const messageInputSchema: messageInputSchema;
export declare const messageRefSchema: messageRefSchema;
export declare const messageViewSchema: messageViewSchema;
export declare const messageViewSenderSchema: messageViewSenderSchema;
export declare const reactionViewSchema: reactionViewSchema;
export declare const reactionViewSenderSchema: reactionViewSenderSchema;
export interface ConvoView extends v.InferInput<typeof convoViewSchema> {
}
export interface DeletedMessageView extends v.InferInput<typeof deletedMessageViewSchema> {
}
export interface LogAcceptConvo extends v.InferInput<typeof logAcceptConvoSchema> {
}
export interface LogAddReaction extends v.InferInput<typeof logAddReactionSchema> {
}
export interface LogBeginConvo extends v.InferInput<typeof logBeginConvoSchema> {
}
export interface LogCreateMessage extends v.InferInput<typeof logCreateMessageSchema> {
}
export interface LogDeleteMessage extends v.InferInput<typeof logDeleteMessageSchema> {
}
export interface LogLeaveConvo extends v.InferInput<typeof logLeaveConvoSchema> {
}
export interface LogMuteConvo extends v.InferInput<typeof logMuteConvoSchema> {
}
export interface LogReadMessage extends v.InferInput<typeof logReadMessageSchema> {
}
export interface LogRemoveReaction extends v.InferInput<typeof logRemoveReactionSchema> {
}
export interface LogUnmuteConvo extends v.InferInput<typeof logUnmuteConvoSchema> {
}
export interface MessageAndReactionView extends v.InferInput<typeof messageAndReactionViewSchema> {
}
export interface MessageInput extends v.InferInput<typeof messageInputSchema> {
}
export interface MessageRef extends v.InferInput<typeof messageRefSchema> {
}
export interface MessageView extends v.InferInput<typeof messageViewSchema> {
}
export interface MessageViewSender extends v.InferInput<typeof messageViewSenderSchema> {
}
export interface ReactionView extends v.InferInput<typeof reactionViewSchema> {
}
export interface ReactionViewSender extends v.InferInput<typeof reactionViewSenderSchema> {
}
export {};
//# sourceMappingURL=defs.d.ts.map