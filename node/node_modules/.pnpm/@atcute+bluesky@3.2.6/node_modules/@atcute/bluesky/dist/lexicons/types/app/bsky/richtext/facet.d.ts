import * as v from '@atcute/lexicons/validations';
declare const _byteSliceSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.richtext.facet#byteSlice">, undefined>;
    /**
     * @minimum 0
     */
    byteEnd: v.IntegerSchema;
    /**
     * @minimum 0
     */
    byteStart: v.IntegerSchema;
}>;
declare const _linkSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.richtext.facet#link">, undefined>;
    uri: v.FormattedStringSchema<"uri">;
}>;
declare const _mainSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.richtext.facet">, undefined>;
    readonly features: v.ArraySchema<v.VariantSchema<readonly [linkSchema, mentionSchema, tagSchema], boolean>>;
    readonly index: byteSliceSchema;
}>;
declare const _mentionSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.richtext.facet#mention">, undefined>;
    did: v.FormattedStringSchema<"did">;
}>;
declare const _tagSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.richtext.facet#tag">, undefined>;
    /**
     * @maxLength 640
     * @maxGraphemes 64
     */
    tag: v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 640>, v.StringGraphemesConstraint<0, 64>]>;
}>;
type byteSlice$schematype = typeof _byteSliceSchema;
type link$schematype = typeof _linkSchema;
type main$schematype = typeof _mainSchema;
type mention$schematype = typeof _mentionSchema;
type tag$schematype = typeof _tagSchema;
export interface byteSliceSchema extends byteSlice$schematype {
}
export interface linkSchema extends link$schematype {
}
export interface mainSchema extends main$schematype {
}
export interface mentionSchema extends mention$schematype {
}
export interface tagSchema extends tag$schematype {
}
export declare const byteSliceSchema: byteSliceSchema;
export declare const linkSchema: linkSchema;
export declare const mainSchema: mainSchema;
export declare const mentionSchema: mentionSchema;
export declare const tagSchema: tagSchema;
export interface ByteSlice extends v.InferInput<typeof byteSliceSchema> {
}
export interface Link extends v.InferInput<typeof linkSchema> {
}
export interface Main extends v.InferInput<typeof mainSchema> {
}
export interface Mention extends v.InferInput<typeof mentionSchema> {
}
export interface Tag extends v.InferInput<typeof tagSchema> {
}
export {};
//# sourceMappingURL=facet.d.ts.map