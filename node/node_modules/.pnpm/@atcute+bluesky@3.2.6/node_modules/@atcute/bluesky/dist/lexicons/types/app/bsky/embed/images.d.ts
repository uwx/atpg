import * as v from '@atcute/lexicons/validations';
import * as AppBskyEmbedDefs from './defs.js';
declare const _imageSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.embed.images#image">, undefined>;
    /**
     * Alt text description of the image, for accessibility.
     */
    alt: v.StringSchema<string>;
    readonly aspectRatio: v.OptionalSchema<AppBskyEmbedDefs.aspectRatioSchema, undefined>;
    /**
     * @accept image/*
     * @maxSize 1000000
     */
    image: v.BlobSchema;
}>;
declare const _mainSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.embed.images">, undefined>;
    /**
     * @maxLength 4
     */
    readonly images: v.SchemaWithConstraint<v.ArraySchema<imageSchema>, readonly [v.ArrayLengthConstraint<0, 4>]>;
}>;
declare const _viewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.embed.images#view">, undefined>;
    /**
     * @maxLength 4
     */
    readonly images: v.SchemaWithConstraint<v.ArraySchema<viewImageSchema>, readonly [v.ArrayLengthConstraint<0, 4>]>;
}>;
declare const _viewImageSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.embed.images#viewImage">, undefined>;
    /**
     * Alt text description of the image, for accessibility.
     */
    alt: v.StringSchema<string>;
    readonly aspectRatio: v.OptionalSchema<AppBskyEmbedDefs.aspectRatioSchema, undefined>;
    /**
     * Fully-qualified URL where a large version of the image can be fetched. May or may not be the exact original blob. For example, CDN location provided by the App View.
     */
    fullsize: v.FormattedStringSchema<"uri">;
    /**
     * Fully-qualified URL where a thumbnail of the image can be fetched. For example, CDN location provided by the App View.
     */
    thumb: v.FormattedStringSchema<"uri">;
}>;
type image$schematype = typeof _imageSchema;
type main$schematype = typeof _mainSchema;
type view$schematype = typeof _viewSchema;
type viewImage$schematype = typeof _viewImageSchema;
export interface imageSchema extends image$schematype {
}
export interface mainSchema extends main$schematype {
}
export interface viewSchema extends view$schematype {
}
export interface viewImageSchema extends viewImage$schematype {
}
export declare const imageSchema: imageSchema;
export declare const mainSchema: mainSchema;
export declare const viewSchema: viewSchema;
export declare const viewImageSchema: viewImageSchema;
export interface Image extends v.InferInput<typeof imageSchema> {
}
export interface Main extends v.InferInput<typeof mainSchema> {
}
export interface View extends v.InferInput<typeof viewSchema> {
}
export interface ViewImage extends v.InferInput<typeof viewImageSchema> {
}
export {};
//# sourceMappingURL=images.d.ts.map