import * as v from '@atcute/lexicons/validations';
declare const _disableRuleSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.postgate#disableRule">, undefined>;
}>;
declare const _mainSchema: v.RecordSchema<v.ObjectSchema<{
    $type: v.LiteralSchema<"app.bsky.feed.postgate">;
    createdAt: v.FormattedStringSchema<"datetime">;
    /**
     * List of AT-URIs embedding this post that the author has detached from.
     * @maxLength 50
     */
    detachedEmbeddingUris: v.OptionalSchema<v.SchemaWithConstraint<v.ArraySchema<v.FormattedStringSchema<"at-uri">>, readonly [v.ArrayLengthConstraint<0, 50>]>, undefined>;
    /**
     * List of rules defining who can embed this post. If value is an empty array or is undefined, no particular rules apply and anyone can embed.
     * @maxLength 5
     */
    readonly embeddingRules: v.OptionalSchema<v.SchemaWithConstraint<v.ArraySchema<v.VariantSchema<readonly [disableRuleSchema], boolean>>, readonly [v.ArrayLengthConstraint<0, 5>]>, undefined>;
    /**
     * Reference (AT-URI) to the post record.
     */
    post: v.FormattedStringSchema<"at-uri">;
}>, v.FormattedStringSchema<"tid">>;
type disableRule$schematype = typeof _disableRuleSchema;
type main$schematype = typeof _mainSchema;
export interface disableRuleSchema extends disableRule$schematype {
}
export interface mainSchema extends main$schematype {
}
export declare const disableRuleSchema: disableRuleSchema;
export declare const mainSchema: mainSchema;
export interface DisableRule extends v.InferInput<typeof disableRuleSchema> {
}
export interface Main extends v.InferInput<typeof mainSchema> {
}
declare module '@atcute/lexicons/ambient' {
    interface Records {
        'app.bsky.feed.postgate': mainSchema;
    }
}
export {};
//# sourceMappingURL=postgate.d.ts.map