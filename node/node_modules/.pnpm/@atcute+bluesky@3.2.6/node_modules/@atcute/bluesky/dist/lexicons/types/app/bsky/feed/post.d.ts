import * as v from '@atcute/lexicons/validations';
import * as AppBskyEmbedExternal from '../embed/external.js';
import * as AppBskyEmbedImages from '../embed/images.js';
import * as AppBskyEmbedRecord from '../embed/record.js';
import * as AppBskyEmbedRecordWithMedia from '../embed/recordWithMedia.js';
import * as AppBskyEmbedVideo from '../embed/video.js';
import * as AppBskyRichtextFacet from '../richtext/facet.js';
import * as ComAtprotoLabelDefs from '@atcute/atproto/types/label/defs';
import * as ComAtprotoRepoStrongRef from '@atcute/atproto/types/repo/strongRef';
declare const _entitySchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.post#entity">, undefined>;
    readonly index: textSliceSchema;
    /**
     * Expected values are 'mention' and 'link'.
     */
    type: v.StringSchema<string>;
    value: v.StringSchema<string>;
}>;
declare const _mainSchema: v.RecordSchema<v.ObjectSchema<{
    $type: v.LiteralSchema<"app.bsky.feed.post">;
    /**
     * Client-declared timestamp when this post was originally created.
     */
    createdAt: v.FormattedStringSchema<"datetime">;
    readonly embed: v.OptionalSchema<v.VariantSchema<readonly [AppBskyEmbedExternal.mainSchema, AppBskyEmbedImages.mainSchema, AppBskyEmbedRecord.mainSchema, AppBskyEmbedRecordWithMedia.mainSchema, AppBskyEmbedVideo.mainSchema], boolean>, undefined>;
    /**
     * DEPRECATED: replaced by app.bsky.richtext.facet.
     * @deprecated
     */
    readonly entities: v.OptionalSchema<v.ArraySchema<entitySchema>, undefined>;
    /**
     * Annotations of text (mentions, URLs, hashtags, etc)
     */
    readonly facets: v.OptionalSchema<v.ArraySchema<AppBskyRichtextFacet.mainSchema>, undefined>;
    /**
     * Self-label values for this post. Effectively content warnings.
     */
    readonly labels: v.OptionalSchema<v.VariantSchema<readonly [ComAtprotoLabelDefs.selfLabelsSchema], boolean>, undefined>;
    /**
     * Indicates human language of post primary text content.
     * @maxLength 3
     */
    langs: v.OptionalSchema<v.SchemaWithConstraint<v.ArraySchema<v.FormattedStringSchema<"language">>, readonly [v.ArrayLengthConstraint<0, 3>]>, undefined>;
    readonly reply: v.OptionalSchema<replyRefSchema, undefined>;
    /**
     * Additional hashtags, in addition to any included in post text and facets.
     * @maxLength 8
     */
    tags: v.OptionalSchema<v.SchemaWithConstraint<v.ArraySchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 640>, v.StringGraphemesConstraint<0, 64>]>>, readonly [v.ArrayLengthConstraint<0, 8>]>, undefined>;
    /**
     * The primary post content. May be an empty string, if there are embeds.
     * @maxLength 3000
     * @maxGraphemes 300
     */
    text: v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 3000>, v.StringGraphemesConstraint<0, 300>]>;
}>, v.FormattedStringSchema<"tid">>;
declare const _replyRefSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.post#replyRef">, undefined>;
    readonly parent: ComAtprotoRepoStrongRef.mainSchema;
    readonly root: ComAtprotoRepoStrongRef.mainSchema;
}>;
declare const _textSliceSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.post#textSlice">, undefined>;
    /**
     * @minimum 0
     */
    end: v.IntegerSchema;
    /**
     * @minimum 0
     */
    start: v.IntegerSchema;
}>;
type entity$schematype = typeof _entitySchema;
type main$schematype = typeof _mainSchema;
type replyRef$schematype = typeof _replyRefSchema;
type textSlice$schematype = typeof _textSliceSchema;
export interface entitySchema extends entity$schematype {
}
export interface mainSchema extends main$schematype {
}
export interface replyRefSchema extends replyRef$schematype {
}
export interface textSliceSchema extends textSlice$schematype {
}
export declare const entitySchema: entitySchema;
export declare const mainSchema: mainSchema;
export declare const replyRefSchema: replyRefSchema;
export declare const textSliceSchema: textSliceSchema;
export interface Entity extends v.InferInput<typeof entitySchema> {
}
export interface Main extends v.InferInput<typeof mainSchema> {
}
export interface ReplyRef extends v.InferInput<typeof replyRefSchema> {
}
export interface TextSlice extends v.InferInput<typeof textSliceSchema> {
}
declare module '@atcute/lexicons/ambient' {
    interface Records {
        'app.bsky.feed.post': mainSchema;
    }
}
export {};
//# sourceMappingURL=post.d.ts.map