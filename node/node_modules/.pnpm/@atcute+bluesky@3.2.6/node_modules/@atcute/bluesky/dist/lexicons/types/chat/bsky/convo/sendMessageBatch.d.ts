import * as v from '@atcute/lexicons/validations';
import * as ChatBskyConvoDefs from './defs.js';
declare const _batchItemSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"chat.bsky.convo.sendMessageBatch#batchItem">, undefined>;
    convoId: v.StringSchema<string>;
    readonly message: ChatBskyConvoDefs.messageInputSchema;
}>;
declare const _mainSchema: v.XRPCProcedureMetadata<null, {
    type: "lex";
    schema: v.ObjectSchema<{
        /**
         * @maxLength 100
         */
        readonly items: v.SchemaWithConstraint<v.ArraySchema<batchItemSchema>, readonly [v.ArrayLengthConstraint<0, 100>]>;
    }>;
}, {
    type: "lex";
    schema: v.ObjectSchema<{
        readonly items: v.ArraySchema<ChatBskyConvoDefs.messageViewSchema>;
    }>;
}, "chat.bsky.convo.sendMessageBatch">;
type batchItem$schematype = typeof _batchItemSchema;
type main$schematype = typeof _mainSchema;
export interface batchItemSchema extends batchItem$schematype {
}
export interface mainSchema extends main$schematype {
}
export declare const batchItemSchema: batchItemSchema;
export declare const mainSchema: mainSchema;
export interface BatchItem extends v.InferInput<typeof batchItemSchema> {
}
export interface $params {
}
export interface $input extends v.InferXRPCBodyInput<mainSchema['input']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCProcedures {
        'chat.bsky.convo.sendMessageBatch': mainSchema;
    }
}
export {};
//# sourceMappingURL=sendMessageBatch.d.ts.map