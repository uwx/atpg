import * as v from '@atcute/lexicons/validations';
import * as AppBskyGraphDefs from './defs.js';
import * as AppBskyRichtextFacet from '../richtext/facet.js';
import * as ComAtprotoLabelDefs from '@atcute/atproto/types/label/defs';
declare const _mainSchema: v.RecordSchema<v.ObjectSchema<{
    $type: v.LiteralSchema<"app.bsky.graph.list">;
    /**
     * @accept image/png, image/jpeg
     * @maxSize 1000000
     */
    avatar: v.OptionalSchema<v.BlobSchema, undefined>;
    createdAt: v.FormattedStringSchema<"datetime">;
    /**
     * @maxLength 3000
     * @maxGraphemes 300
     */
    description: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 3000>, v.StringGraphemesConstraint<0, 300>]>, undefined>;
    readonly descriptionFacets: v.OptionalSchema<v.ArraySchema<AppBskyRichtextFacet.mainSchema>, undefined>;
    readonly labels: v.OptionalSchema<v.VariantSchema<readonly [ComAtprotoLabelDefs.selfLabelsSchema], boolean>, undefined>;
    /**
     * Display name for list; can not be empty.
     * @minLength 1
     * @maxLength 64
     */
    name: v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<1, 64>]>;
    /**
     * Defines the purpose of the list (aka, moderation-oriented or curration-oriented)
     */
    readonly purpose: AppBskyGraphDefs.listPurposeSchema;
}>, v.FormattedStringSchema<"tid">>;
type main$schematype = typeof _mainSchema;
export interface mainSchema extends main$schematype {
}
export declare const mainSchema: mainSchema;
export interface Main extends v.InferInput<typeof mainSchema> {
}
declare module '@atcute/lexicons/ambient' {
    interface Records {
        'app.bsky.graph.list': mainSchema;
    }
}
export {};
//# sourceMappingURL=list.d.ts.map