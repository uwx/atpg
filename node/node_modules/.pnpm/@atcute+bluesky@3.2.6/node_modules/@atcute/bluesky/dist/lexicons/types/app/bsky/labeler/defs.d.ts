import * as v from '@atcute/lexicons/validations';
import * as AppBskyActorDefs from '../actor/defs.js';
import * as ComAtprotoLabelDefs from '@atcute/atproto/types/label/defs';
import * as ComAtprotoModerationDefs from '@atcute/atproto/types/moderation/defs';
declare const _labelerPoliciesSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.labeler.defs#labelerPolicies">, undefined>;
    /**
     * Label values created by this labeler and scoped exclusively to it. Labels defined here will override global label definitions for this labeler.
     */
    readonly labelValueDefinitions: v.OptionalSchema<v.ArraySchema<ComAtprotoLabelDefs.labelValueDefinitionSchema>, undefined>;
    /**
     * The label values which this labeler publishes. May include global or custom labels.
     */
    readonly labelValues: v.ArraySchema<ComAtprotoLabelDefs.labelValueSchema>;
}>;
declare const _labelerViewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.labeler.defs#labelerView">, undefined>;
    cid: v.FormattedStringSchema<"cid">;
    readonly creator: AppBskyActorDefs.profileViewSchema;
    indexedAt: v.FormattedStringSchema<"datetime">;
    readonly labels: v.OptionalSchema<v.ArraySchema<ComAtprotoLabelDefs.labelSchema>, undefined>;
    /**
     * @minimum 0
     */
    likeCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    uri: v.FormattedStringSchema<"at-uri">;
    readonly viewer: v.OptionalSchema<labelerViewerStateSchema, undefined>;
}>;
declare const _labelerViewDetailedSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.labeler.defs#labelerViewDetailed">, undefined>;
    cid: v.FormattedStringSchema<"cid">;
    readonly creator: AppBskyActorDefs.profileViewSchema;
    indexedAt: v.FormattedStringSchema<"datetime">;
    readonly labels: v.OptionalSchema<v.ArraySchema<ComAtprotoLabelDefs.labelSchema>, undefined>;
    /**
     * @minimum 0
     */
    likeCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    readonly policies: labelerPoliciesSchema;
    /**
     * The set of report reason 'codes' which are in-scope for this service to review and action. These usually align to policy categories. If not defined (distinct from empty array), all reason types are allowed.
     */
    readonly reasonTypes: v.OptionalSchema<v.ArraySchema<ComAtprotoModerationDefs.reasonTypeSchema>, undefined>;
    /**
     * Set of record types (collection NSIDs) which can be reported to this service. If not defined (distinct from empty array), default is any record type.
     */
    subjectCollections: v.OptionalSchema<v.ArraySchema<v.FormattedStringSchema<"nsid">>, undefined>;
    /**
     * The set of subject types (account, record, etc) this service accepts reports on.
     */
    readonly subjectTypes: v.OptionalSchema<v.ArraySchema<ComAtprotoModerationDefs.subjectTypeSchema>, undefined>;
    uri: v.FormattedStringSchema<"at-uri">;
    readonly viewer: v.OptionalSchema<labelerViewerStateSchema, undefined>;
}>;
declare const _labelerViewerStateSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.labeler.defs#labelerViewerState">, undefined>;
    like: v.OptionalSchema<v.FormattedStringSchema<"at-uri">, undefined>;
}>;
type labelerPolicies$schematype = typeof _labelerPoliciesSchema;
type labelerView$schematype = typeof _labelerViewSchema;
type labelerViewDetailed$schematype = typeof _labelerViewDetailedSchema;
type labelerViewerState$schematype = typeof _labelerViewerStateSchema;
export interface labelerPoliciesSchema extends labelerPolicies$schematype {
}
export interface labelerViewSchema extends labelerView$schematype {
}
export interface labelerViewDetailedSchema extends labelerViewDetailed$schematype {
}
export interface labelerViewerStateSchema extends labelerViewerState$schematype {
}
export declare const labelerPoliciesSchema: labelerPoliciesSchema;
export declare const labelerViewSchema: labelerViewSchema;
export declare const labelerViewDetailedSchema: labelerViewDetailedSchema;
export declare const labelerViewerStateSchema: labelerViewerStateSchema;
export interface LabelerPolicies extends v.InferInput<typeof labelerPoliciesSchema> {
}
export interface LabelerView extends v.InferInput<typeof labelerViewSchema> {
}
export interface LabelerViewDetailed extends v.InferInput<typeof labelerViewDetailedSchema> {
}
export interface LabelerViewerState extends v.InferInput<typeof labelerViewerStateSchema> {
}
export {};
//# sourceMappingURL=defs.d.ts.map