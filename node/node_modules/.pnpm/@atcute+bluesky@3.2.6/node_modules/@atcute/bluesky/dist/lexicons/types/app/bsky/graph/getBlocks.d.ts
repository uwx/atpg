import * as v from '@atcute/lexicons/validations';
import * as AppBskyActorDefs from '../actor/defs.js';
declare const _mainSchema: v.XRPCQueryMetadata<v.ObjectSchema<{
    cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
    /**
     * @minimum 1
     * @maximum 100
     * @default 50
     */
    limit: v.OptionalSchema<v.SchemaWithConstraint<v.IntegerSchema, readonly [v.IntegerRangeConstraint<1, 100>]>, 50>;
}>, {
    type: "lex";
    schema: v.ObjectSchema<{
        readonly blocks: v.ArraySchema<AppBskyActorDefs.profileViewSchema>;
        cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
    }>;
}, "app.bsky.graph.getBlocks">;
type main$schematype = typeof _mainSchema;
export interface mainSchema extends main$schematype {
}
export declare const mainSchema: mainSchema;
export interface $params extends v.InferInput<mainSchema['params']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCQueries {
        'app.bsky.graph.getBlocks': mainSchema;
    }
}
export {};
//# sourceMappingURL=getBlocks.d.ts.map