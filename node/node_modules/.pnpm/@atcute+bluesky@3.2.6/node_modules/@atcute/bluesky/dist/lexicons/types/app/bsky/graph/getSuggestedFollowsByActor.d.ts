import * as v from '@atcute/lexicons/validations';
import * as AppBskyActorDefs from '../actor/defs.js';
declare const _mainSchema: v.XRPCQueryMetadata<v.ObjectSchema<{
    actor: v.FormattedStringSchema<"at-identifier">;
}>, {
    type: "lex";
    schema: v.ObjectSchema<{
        /**
         * If true, response has fallen-back to generic results, and is not scoped using relativeToDid
         * @default false
         */
        isFallback: v.OptionalSchema<v.BooleanSchema, false>;
        /**
         * Snowflake for this recommendation, use when submitting recommendation events.
         */
        recId: v.OptionalSchema<v.IntegerSchema, undefined>;
        readonly suggestions: v.ArraySchema<AppBskyActorDefs.profileViewSchema>;
    }>;
}, "app.bsky.graph.getSuggestedFollowsByActor">;
type main$schematype = typeof _mainSchema;
export interface mainSchema extends main$schematype {
}
export declare const mainSchema: mainSchema;
export interface $params extends v.InferInput<mainSchema['params']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCQueries {
        'app.bsky.graph.getSuggestedFollowsByActor': mainSchema;
    }
}
export {};
//# sourceMappingURL=getSuggestedFollowsByActor.d.ts.map