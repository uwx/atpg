import * as v from '@atcute/lexicons/validations';
import * as AppBskyUnspeccedDefs from './defs.js';
const _mainSchema = /*#__PURE__*/ v.query('app.bsky.unspecced.getPostThreadOtherV2', {
    params: /*#__PURE__*/ v.object({
        /**
         * Reference (AT-URI) to post record. This is the anchor post.
         */
        anchor: /*#__PURE__*/ v.resourceUriString(),
        /**
         * Whether to prioritize posts from followed users. It only has effect when the user is authenticated.
         * @default false
         */
        prioritizeFollowedUsers: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.boolean(), false),
    }),
    output: {
        type: 'lex',
        schema: /*#__PURE__*/ v.object({
            /**
             * A flat list of other thread items. The depth of each item is indicated by the depth property inside the item.
             */
            get thread() {
                return /*#__PURE__*/ v.array(threadItemSchema);
            },
        }),
    },
});
const _threadItemSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(
    /*#__PURE__*/ v.literal('app.bsky.unspecced.getPostThreadOtherV2#threadItem')),
    /**
     * The nesting level of this item in the thread. Depth 0 means the anchor item. Items above have negative depths, items below have positive depths.
     */
    depth: /*#__PURE__*/ v.integer(),
    uri: /*#__PURE__*/ v.resourceUriString(),
    get value() {
        return /*#__PURE__*/ v.variant([AppBskyUnspeccedDefs.threadItemPostSchema]);
    },
});
export const mainSchema = _mainSchema;
export const threadItemSchema = _threadItemSchema;
//# sourceMappingURL=getPostThreadOtherV2.js.map