import * as v from '@atcute/lexicons/validations';
import * as AppBskyEmbedExternal from '../embed/external.js';
declare const _liveSchema: v.LiteralSchema<"app.bsky.actor.status#live">;
declare const _mainSchema: v.RecordSchema<v.ObjectSchema<{
    $type: v.LiteralSchema<"app.bsky.actor.status">;
    createdAt: v.FormattedStringSchema<"datetime">;
    /**
     * The duration of the status in minutes. Applications can choose to impose minimum and maximum limits.
     * @minimum 1
     */
    durationMinutes: v.OptionalSchema<v.SchemaWithConstraint<v.IntegerSchema, readonly [v.IntegerRangeConstraint<1, number>]>, undefined>;
    /**
     * An optional embed associated with the status.
     */
    readonly embed: v.OptionalSchema<v.VariantSchema<readonly [AppBskyEmbedExternal.mainSchema], boolean>, undefined>;
    /**
     * The status for the account.
     */
    status: v.StringSchema<(string & {}) | "app.bsky.actor.status#live">;
}>, v.LiteralSchema<"self">>;
type live$schematype = typeof _liveSchema;
type main$schematype = typeof _mainSchema;
export interface liveSchema extends live$schematype {
}
export interface mainSchema extends main$schematype {
}
export declare const liveSchema: liveSchema;
export declare const mainSchema: mainSchema;
export type Live = v.InferInput<typeof liveSchema>;
export interface Main extends v.InferInput<typeof mainSchema> {
}
declare module '@atcute/lexicons/ambient' {
    interface Records {
        'app.bsky.actor.status': mainSchema;
    }
}
export {};
//# sourceMappingURL=status.d.ts.map