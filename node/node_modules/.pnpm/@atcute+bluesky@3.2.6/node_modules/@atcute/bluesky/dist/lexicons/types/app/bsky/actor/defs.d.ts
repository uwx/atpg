import * as v from '@atcute/lexicons/validations';
import * as AppBskyEmbedExternal from '../embed/external.js';
import * as AppBskyFeedPostgate from '../feed/postgate.js';
import * as AppBskyFeedThreadgate from '../feed/threadgate.js';
import * as AppBskyGraphDefs from '../graph/defs.js';
import * as AppBskyNotificationDefs from '../notification/defs.js';
import * as ComAtprotoLabelDefs from '@atcute/atproto/types/label/defs';
import * as ComAtprotoRepoStrongRef from '@atcute/atproto/types/repo/strongRef';
declare const _adultContentPrefSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#adultContentPref">, undefined>;
    /**
     * @default false
     */
    enabled: v.OptionalSchema<v.BooleanSchema, false>;
}>;
declare const _bskyAppProgressGuideSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#bskyAppProgressGuide">, undefined>;
    /**
     * @maxLength 100
     */
    guide: v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 100>]>;
}>;
declare const _bskyAppStatePrefSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#bskyAppStatePref">, undefined>;
    readonly activeProgressGuide: v.OptionalSchema<bskyAppProgressGuideSchema, undefined>;
    /**
     * Storage for NUXs the user has encountered.
     * @maxLength 100
     */
    readonly nuxs: v.OptionalSchema<v.SchemaWithConstraint<v.ArraySchema<nuxSchema>, readonly [v.ArrayLengthConstraint<0, 100>]>, undefined>;
    /**
     * An array of tokens which identify nudges (modals, popups, tours, highlight dots) that should be shown to the user.
     * @maxLength 1000
     */
    queuedNudges: v.OptionalSchema<v.SchemaWithConstraint<v.ArraySchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 100>]>>, readonly [v.ArrayLengthConstraint<0, 1000>]>, undefined>;
}>;
declare const _contentLabelPrefSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#contentLabelPref">, undefined>;
    label: v.StringSchema<string>;
    /**
     * Which labeler does this preference apply to? If undefined, applies globally.
     */
    labelerDid: v.OptionalSchema<v.FormattedStringSchema<"did">, undefined>;
    visibility: v.StringSchema<(string & {}) | "hide" | "ignore" | "show" | "warn">;
}>;
declare const _feedViewPrefSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#feedViewPref">, undefined>;
    /**
     * The URI of the feed, or an identifier which describes the feed.
     */
    feed: v.StringSchema<string>;
    /**
     * Hide quote posts in the feed.
     */
    hideQuotePosts: v.OptionalSchema<v.BooleanSchema, undefined>;
    /**
     * Hide replies in the feed.
     */
    hideReplies: v.OptionalSchema<v.BooleanSchema, undefined>;
    /**
     * Hide replies in the feed if they do not have this number of likes.
     */
    hideRepliesByLikeCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    /**
     * Hide replies in the feed if they are not by followed users.
     * @default true
     */
    hideRepliesByUnfollowed: v.OptionalSchema<v.BooleanSchema, true>;
    /**
     * Hide reposts in the feed.
     */
    hideReposts: v.OptionalSchema<v.BooleanSchema, undefined>;
}>;
declare const _hiddenPostsPrefSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#hiddenPostsPref">, undefined>;
    /**
     * A list of URIs of posts the account owner has hidden.
     */
    items: v.ArraySchema<v.FormattedStringSchema<"at-uri">>;
}>;
declare const _interestsPrefSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#interestsPref">, undefined>;
    /**
     * A list of tags which describe the account owner's interests gathered during onboarding.
     * @maxLength 100
     */
    tags: v.SchemaWithConstraint<v.ArraySchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 640>, v.StringGraphemesConstraint<0, 64>]>>, readonly [v.ArrayLengthConstraint<0, 100>]>;
}>;
declare const _knownFollowersSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#knownFollowers">, undefined>;
    count: v.IntegerSchema;
    /**
     * @minLength 0
     * @maxLength 5
     */
    readonly followers: v.SchemaWithConstraint<v.ArraySchema<profileViewBasicSchema>, readonly [v.ArrayLengthConstraint<0, 5>]>;
}>;
declare const _labelerPrefItemSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#labelerPrefItem">, undefined>;
    did: v.FormattedStringSchema<"did">;
}>;
declare const _labelersPrefSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#labelersPref">, undefined>;
    readonly labelers: v.ArraySchema<labelerPrefItemSchema>;
}>;
declare const _mutedWordSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#mutedWord">, undefined>;
    /**
     * Groups of users to apply the muted word to. If undefined, applies to all users.
     * @default "all"
     */
    actorTarget: v.OptionalSchema<v.StringSchema<(string & {}) | "all" | "exclude-following">, "all">;
    /**
     * The date and time at which the muted word will expire and no longer be applied.
     */
    expiresAt: v.OptionalSchema<v.FormattedStringSchema<"datetime">, undefined>;
    id: v.OptionalSchema<v.StringSchema<string>, undefined>;
    /**
     * The intended targets of the muted word.
     */
    readonly targets: v.ArraySchema<mutedWordTargetSchema>;
    /**
     * The muted word itself.
     * @maxLength 10000
     * @maxGraphemes 1000
     */
    value: v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 10000>, v.StringGraphemesConstraint<0, 1000>]>;
}>;
declare const _mutedWordTargetSchema: v.SchemaWithConstraint<v.StringSchema<(string & {}) | "tag" | "content">, readonly [v.StringLengthConstraint<0, 640>, v.StringGraphemesConstraint<0, 64>]>;
declare const _mutedWordsPrefSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#mutedWordsPref">, undefined>;
    /**
     * A list of words the account owner has muted.
     */
    readonly items: v.ArraySchema<mutedWordSchema>;
}>;
declare const _nuxSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#nux">, undefined>;
    /**
     * @default false
     */
    completed: v.OptionalSchema<v.BooleanSchema, false>;
    /**
     * Arbitrary data for the NUX. The structure is defined by the NUX itself. Limited to 300 characters.
     * @maxLength 3000
     * @maxGraphemes 300
     */
    data: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 3000>, v.StringGraphemesConstraint<0, 300>]>, undefined>;
    /**
     * The date and time at which the NUX will expire and should be considered completed.
     */
    expiresAt: v.OptionalSchema<v.FormattedStringSchema<"datetime">, undefined>;
    /**
     * @maxLength 100
     */
    id: v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 100>]>;
}>;
declare const _personalDetailsPrefSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#personalDetailsPref">, undefined>;
    /**
     * The birth date of account owner.
     */
    birthDate: v.OptionalSchema<v.FormattedStringSchema<"datetime">, undefined>;
}>;
declare const _postInteractionSettingsPrefSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#postInteractionSettingsPref">, undefined>;
    /**
     * Matches postgate record. List of rules defining who can embed this users posts. If value is an empty array or is undefined, no particular rules apply and anyone can embed.
     * @maxLength 5
     */
    readonly postgateEmbeddingRules: v.OptionalSchema<v.SchemaWithConstraint<v.ArraySchema<v.VariantSchema<readonly [AppBskyFeedPostgate.disableRuleSchema], boolean>>, readonly [v.ArrayLengthConstraint<0, 5>]>, undefined>;
    /**
     * Matches threadgate record. List of rules defining who can reply to this users posts. If value is an empty array, no one can reply. If value is undefined, anyone can reply.
     * @maxLength 5
     */
    readonly threadgateAllowRules: v.OptionalSchema<v.SchemaWithConstraint<v.ArraySchema<v.VariantSchema<readonly [AppBskyFeedThreadgate.followerRuleSchema, AppBskyFeedThreadgate.followingRuleSchema, AppBskyFeedThreadgate.listRuleSchema, AppBskyFeedThreadgate.mentionRuleSchema], boolean>>, readonly [v.ArrayLengthConstraint<0, 5>]>, undefined>;
}>;
declare const _preferencesSchema: v.ArraySchema<v.VariantSchema<readonly [adultContentPrefSchema, bskyAppStatePrefSchema, contentLabelPrefSchema, feedViewPrefSchema, hiddenPostsPrefSchema, interestsPrefSchema, labelersPrefSchema, mutedWordsPrefSchema, personalDetailsPrefSchema, postInteractionSettingsPrefSchema, savedFeedsPrefSchema, savedFeedsPrefV2Schema, threadViewPrefSchema, verificationPrefsSchema], boolean>>;
declare const _profileAssociatedSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#profileAssociated">, undefined>;
    readonly activitySubscription: v.OptionalSchema<profileAssociatedActivitySubscriptionSchema, undefined>;
    readonly chat: v.OptionalSchema<profileAssociatedChatSchema, undefined>;
    feedgens: v.OptionalSchema<v.IntegerSchema, undefined>;
    labeler: v.OptionalSchema<v.BooleanSchema, undefined>;
    lists: v.OptionalSchema<v.IntegerSchema, undefined>;
    starterPacks: v.OptionalSchema<v.IntegerSchema, undefined>;
}>;
declare const _profileAssociatedActivitySubscriptionSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#profileAssociatedActivitySubscription">, undefined>;
    allowSubscriptions: v.StringSchema<(string & {}) | "followers" | "mutuals" | "none">;
}>;
declare const _profileAssociatedChatSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#profileAssociatedChat">, undefined>;
    allowIncoming: v.StringSchema<(string & {}) | "following" | "all" | "none">;
}>;
declare const _profileViewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#profileView">, undefined>;
    readonly associated: v.OptionalSchema<profileAssociatedSchema, undefined>;
    avatar: v.OptionalSchema<v.FormattedStringSchema<"uri">, undefined>;
    createdAt: v.OptionalSchema<v.FormattedStringSchema<"datetime">, undefined>;
    /**
     * @maxLength 2560
     * @maxGraphemes 256
     */
    description: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 2560>, v.StringGraphemesConstraint<0, 256>]>, undefined>;
    did: v.FormattedStringSchema<"did">;
    /**
     * @maxLength 640
     * @maxGraphemes 64
     */
    displayName: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 640>, v.StringGraphemesConstraint<0, 64>]>, undefined>;
    handle: v.FormattedStringSchema<"handle">;
    indexedAt: v.OptionalSchema<v.FormattedStringSchema<"datetime">, undefined>;
    readonly labels: v.OptionalSchema<v.ArraySchema<ComAtprotoLabelDefs.labelSchema>, undefined>;
    pronouns: v.OptionalSchema<v.StringSchema<string>, undefined>;
    readonly status: v.OptionalSchema<statusViewSchema, undefined>;
    readonly verification: v.OptionalSchema<verificationStateSchema, undefined>;
    readonly viewer: v.OptionalSchema<viewerStateSchema, undefined>;
}>;
declare const _profileViewBasicSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#profileViewBasic">, undefined>;
    readonly associated: v.OptionalSchema<profileAssociatedSchema, undefined>;
    avatar: v.OptionalSchema<v.FormattedStringSchema<"uri">, undefined>;
    createdAt: v.OptionalSchema<v.FormattedStringSchema<"datetime">, undefined>;
    did: v.FormattedStringSchema<"did">;
    /**
     * @maxLength 640
     * @maxGraphemes 64
     */
    displayName: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 640>, v.StringGraphemesConstraint<0, 64>]>, undefined>;
    handle: v.FormattedStringSchema<"handle">;
    readonly labels: v.OptionalSchema<v.ArraySchema<ComAtprotoLabelDefs.labelSchema>, undefined>;
    pronouns: v.OptionalSchema<v.StringSchema<string>, undefined>;
    readonly status: v.OptionalSchema<statusViewSchema, undefined>;
    readonly verification: v.OptionalSchema<verificationStateSchema, undefined>;
    readonly viewer: v.OptionalSchema<viewerStateSchema, undefined>;
}>;
declare const _profileViewDetailedSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#profileViewDetailed">, undefined>;
    readonly associated: v.OptionalSchema<profileAssociatedSchema, undefined>;
    avatar: v.OptionalSchema<v.FormattedStringSchema<"uri">, undefined>;
    banner: v.OptionalSchema<v.FormattedStringSchema<"uri">, undefined>;
    createdAt: v.OptionalSchema<v.FormattedStringSchema<"datetime">, undefined>;
    /**
     * @maxLength 2560
     * @maxGraphemes 256
     */
    description: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 2560>, v.StringGraphemesConstraint<0, 256>]>, undefined>;
    did: v.FormattedStringSchema<"did">;
    /**
     * @maxLength 640
     * @maxGraphemes 64
     */
    displayName: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 640>, v.StringGraphemesConstraint<0, 64>]>, undefined>;
    followersCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    followsCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    handle: v.FormattedStringSchema<"handle">;
    indexedAt: v.OptionalSchema<v.FormattedStringSchema<"datetime">, undefined>;
    readonly joinedViaStarterPack: v.OptionalSchema<AppBskyGraphDefs.starterPackViewBasicSchema, undefined>;
    readonly labels: v.OptionalSchema<v.ArraySchema<ComAtprotoLabelDefs.labelSchema>, undefined>;
    readonly pinnedPost: v.OptionalSchema<ComAtprotoRepoStrongRef.mainSchema, undefined>;
    postsCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    pronouns: v.OptionalSchema<v.StringSchema<string>, undefined>;
    readonly status: v.OptionalSchema<statusViewSchema, undefined>;
    readonly verification: v.OptionalSchema<verificationStateSchema, undefined>;
    readonly viewer: v.OptionalSchema<viewerStateSchema, undefined>;
    website: v.OptionalSchema<v.FormattedStringSchema<"uri">, undefined>;
}>;
declare const _savedFeedSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#savedFeed">, undefined>;
    id: v.StringSchema<string>;
    pinned: v.BooleanSchema;
    type: v.StringSchema<"list" | (string & {}) | "feed" | "timeline">;
    value: v.StringSchema<string>;
}>;
declare const _savedFeedsPrefSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#savedFeedsPref">, undefined>;
    pinned: v.ArraySchema<v.FormattedStringSchema<"at-uri">>;
    saved: v.ArraySchema<v.FormattedStringSchema<"at-uri">>;
    timelineIndex: v.OptionalSchema<v.IntegerSchema, undefined>;
}>;
declare const _savedFeedsPrefV2Schema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#savedFeedsPrefV2">, undefined>;
    readonly items: v.ArraySchema<savedFeedSchema>;
}>;
declare const _statusViewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#statusView">, undefined>;
    /**
     * An optional embed associated with the status.
     */
    readonly embed: v.OptionalSchema<v.VariantSchema<readonly [AppBskyEmbedExternal.viewSchema], boolean>, undefined>;
    /**
     * The date when this status will expire. The application might choose to no longer return the status after expiration.
     */
    expiresAt: v.OptionalSchema<v.FormattedStringSchema<"datetime">, undefined>;
    /**
     * True if the status is not expired, false if it is expired. Only present if expiration was set.
     */
    isActive: v.OptionalSchema<v.BooleanSchema, undefined>;
    record: v.UnknownSchema;
    /**
     * The status for the account.
     */
    status: v.StringSchema<(string & {}) | "app.bsky.actor.status#live">;
}>;
declare const _threadViewPrefSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#threadViewPref">, undefined>;
    /**
     * Show followed users at the top of all replies.
     */
    prioritizeFollowedUsers: v.OptionalSchema<v.BooleanSchema, undefined>;
    /**
     * Sorting mode for threads.
     */
    sort: v.OptionalSchema<v.StringSchema<(string & {}) | "hotness" | "most-likes" | "newest" | "oldest" | "random">, undefined>;
}>;
declare const _verificationPrefsSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#verificationPrefs">, undefined>;
    /**
     * Hide the blue check badges for verified accounts and trusted verifiers.
     * @default false
     */
    hideBadges: v.OptionalSchema<v.BooleanSchema, false>;
}>;
declare const _verificationStateSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#verificationState">, undefined>;
    /**
     * The user's status as a trusted verifier.
     */
    trustedVerifierStatus: v.StringSchema<(string & {}) | "none" | "invalid" | "valid">;
    /**
     * All verifications issued by trusted verifiers on behalf of this user. Verifications by untrusted verifiers are not included.
     */
    readonly verifications: v.ArraySchema<verificationViewSchema>;
    /**
     * The user's status as a verified account.
     */
    verifiedStatus: v.StringSchema<(string & {}) | "none" | "invalid" | "valid">;
}>;
declare const _verificationViewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#verificationView">, undefined>;
    /**
     * Timestamp when the verification was created.
     */
    createdAt: v.FormattedStringSchema<"datetime">;
    /**
     * True if the verification passes validation, otherwise false.
     */
    isValid: v.BooleanSchema;
    /**
     * The user who issued this verification.
     */
    issuer: v.FormattedStringSchema<"did">;
    /**
     * The AT-URI of the verification record.
     */
    uri: v.FormattedStringSchema<"at-uri">;
}>;
declare const _viewerStateSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.actor.defs#viewerState">, undefined>;
    /**
     * This property is present only in selected cases, as an optimization.
     */
    readonly activitySubscription: v.OptionalSchema<AppBskyNotificationDefs.activitySubscriptionSchema, undefined>;
    blockedBy: v.OptionalSchema<v.BooleanSchema, undefined>;
    blocking: v.OptionalSchema<v.FormattedStringSchema<"at-uri">, undefined>;
    readonly blockingByList: v.OptionalSchema<AppBskyGraphDefs.listViewBasicSchema, undefined>;
    followedBy: v.OptionalSchema<v.FormattedStringSchema<"at-uri">, undefined>;
    following: v.OptionalSchema<v.FormattedStringSchema<"at-uri">, undefined>;
    /**
     * This property is present only in selected cases, as an optimization.
     */
    readonly knownFollowers: v.OptionalSchema<knownFollowersSchema, undefined>;
    muted: v.OptionalSchema<v.BooleanSchema, undefined>;
    readonly mutedByList: v.OptionalSchema<AppBskyGraphDefs.listViewBasicSchema, undefined>;
}>;
type adultContentPref$schematype = typeof _adultContentPrefSchema;
type bskyAppProgressGuide$schematype = typeof _bskyAppProgressGuideSchema;
type bskyAppStatePref$schematype = typeof _bskyAppStatePrefSchema;
type contentLabelPref$schematype = typeof _contentLabelPrefSchema;
type feedViewPref$schematype = typeof _feedViewPrefSchema;
type hiddenPostsPref$schematype = typeof _hiddenPostsPrefSchema;
type interestsPref$schematype = typeof _interestsPrefSchema;
type knownFollowers$schematype = typeof _knownFollowersSchema;
type labelerPrefItem$schematype = typeof _labelerPrefItemSchema;
type labelersPref$schematype = typeof _labelersPrefSchema;
type mutedWord$schematype = typeof _mutedWordSchema;
type mutedWordTarget$schematype = typeof _mutedWordTargetSchema;
type mutedWordsPref$schematype = typeof _mutedWordsPrefSchema;
type nux$schematype = typeof _nuxSchema;
type personalDetailsPref$schematype = typeof _personalDetailsPrefSchema;
type postInteractionSettingsPref$schematype = typeof _postInteractionSettingsPrefSchema;
type preferences$schematype = typeof _preferencesSchema;
type profileAssociated$schematype = typeof _profileAssociatedSchema;
type profileAssociatedActivitySubscription$schematype = typeof _profileAssociatedActivitySubscriptionSchema;
type profileAssociatedChat$schematype = typeof _profileAssociatedChatSchema;
type profileView$schematype = typeof _profileViewSchema;
type profileViewBasic$schematype = typeof _profileViewBasicSchema;
type profileViewDetailed$schematype = typeof _profileViewDetailedSchema;
type savedFeed$schematype = typeof _savedFeedSchema;
type savedFeedsPref$schematype = typeof _savedFeedsPrefSchema;
type savedFeedsPrefV2$schematype = typeof _savedFeedsPrefV2Schema;
type statusView$schematype = typeof _statusViewSchema;
type threadViewPref$schematype = typeof _threadViewPrefSchema;
type verificationPrefs$schematype = typeof _verificationPrefsSchema;
type verificationState$schematype = typeof _verificationStateSchema;
type verificationView$schematype = typeof _verificationViewSchema;
type viewerState$schematype = typeof _viewerStateSchema;
export interface adultContentPrefSchema extends adultContentPref$schematype {
}
export interface bskyAppProgressGuideSchema extends bskyAppProgressGuide$schematype {
}
export interface bskyAppStatePrefSchema extends bskyAppStatePref$schematype {
}
export interface contentLabelPrefSchema extends contentLabelPref$schematype {
}
export interface feedViewPrefSchema extends feedViewPref$schematype {
}
export interface hiddenPostsPrefSchema extends hiddenPostsPref$schematype {
}
export interface interestsPrefSchema extends interestsPref$schematype {
}
export interface knownFollowersSchema extends knownFollowers$schematype {
}
export interface labelerPrefItemSchema extends labelerPrefItem$schematype {
}
export interface labelersPrefSchema extends labelersPref$schematype {
}
export interface mutedWordSchema extends mutedWord$schematype {
}
export interface mutedWordTargetSchema extends mutedWordTarget$schematype {
}
export interface mutedWordsPrefSchema extends mutedWordsPref$schematype {
}
export interface nuxSchema extends nux$schematype {
}
export interface personalDetailsPrefSchema extends personalDetailsPref$schematype {
}
export interface postInteractionSettingsPrefSchema extends postInteractionSettingsPref$schematype {
}
export interface preferencesSchema extends preferences$schematype {
}
export interface profileAssociatedSchema extends profileAssociated$schematype {
}
export interface profileAssociatedActivitySubscriptionSchema extends profileAssociatedActivitySubscription$schematype {
}
export interface profileAssociatedChatSchema extends profileAssociatedChat$schematype {
}
export interface profileViewSchema extends profileView$schematype {
}
export interface profileViewBasicSchema extends profileViewBasic$schematype {
}
export interface profileViewDetailedSchema extends profileViewDetailed$schematype {
}
export interface savedFeedSchema extends savedFeed$schematype {
}
export interface savedFeedsPrefSchema extends savedFeedsPref$schematype {
}
export interface savedFeedsPrefV2Schema extends savedFeedsPrefV2$schematype {
}
export interface statusViewSchema extends statusView$schematype {
}
export interface threadViewPrefSchema extends threadViewPref$schematype {
}
export interface verificationPrefsSchema extends verificationPrefs$schematype {
}
export interface verificationStateSchema extends verificationState$schematype {
}
export interface verificationViewSchema extends verificationView$schematype {
}
export interface viewerStateSchema extends viewerState$schematype {
}
export declare const adultContentPrefSchema: adultContentPrefSchema;
export declare const bskyAppProgressGuideSchema: bskyAppProgressGuideSchema;
export declare const bskyAppStatePrefSchema: bskyAppStatePrefSchema;
export declare const contentLabelPrefSchema: contentLabelPrefSchema;
export declare const feedViewPrefSchema: feedViewPrefSchema;
export declare const hiddenPostsPrefSchema: hiddenPostsPrefSchema;
export declare const interestsPrefSchema: interestsPrefSchema;
export declare const knownFollowersSchema: knownFollowersSchema;
export declare const labelerPrefItemSchema: labelerPrefItemSchema;
export declare const labelersPrefSchema: labelersPrefSchema;
export declare const mutedWordSchema: mutedWordSchema;
export declare const mutedWordTargetSchema: mutedWordTargetSchema;
export declare const mutedWordsPrefSchema: mutedWordsPrefSchema;
export declare const nuxSchema: nuxSchema;
export declare const personalDetailsPrefSchema: personalDetailsPrefSchema;
export declare const postInteractionSettingsPrefSchema: postInteractionSettingsPrefSchema;
export declare const preferencesSchema: preferencesSchema;
export declare const profileAssociatedSchema: profileAssociatedSchema;
export declare const profileAssociatedActivitySubscriptionSchema: profileAssociatedActivitySubscriptionSchema;
export declare const profileAssociatedChatSchema: profileAssociatedChatSchema;
export declare const profileViewSchema: profileViewSchema;
export declare const profileViewBasicSchema: profileViewBasicSchema;
export declare const profileViewDetailedSchema: profileViewDetailedSchema;
export declare const savedFeedSchema: savedFeedSchema;
export declare const savedFeedsPrefSchema: savedFeedsPrefSchema;
export declare const savedFeedsPrefV2Schema: savedFeedsPrefV2Schema;
export declare const statusViewSchema: statusViewSchema;
export declare const threadViewPrefSchema: threadViewPrefSchema;
export declare const verificationPrefsSchema: verificationPrefsSchema;
export declare const verificationStateSchema: verificationStateSchema;
export declare const verificationViewSchema: verificationViewSchema;
export declare const viewerStateSchema: viewerStateSchema;
export interface AdultContentPref extends v.InferInput<typeof adultContentPrefSchema> {
}
export interface BskyAppProgressGuide extends v.InferInput<typeof bskyAppProgressGuideSchema> {
}
export interface BskyAppStatePref extends v.InferInput<typeof bskyAppStatePrefSchema> {
}
export interface ContentLabelPref extends v.InferInput<typeof contentLabelPrefSchema> {
}
export interface FeedViewPref extends v.InferInput<typeof feedViewPrefSchema> {
}
export interface HiddenPostsPref extends v.InferInput<typeof hiddenPostsPrefSchema> {
}
export interface InterestsPref extends v.InferInput<typeof interestsPrefSchema> {
}
export interface KnownFollowers extends v.InferInput<typeof knownFollowersSchema> {
}
export interface LabelerPrefItem extends v.InferInput<typeof labelerPrefItemSchema> {
}
export interface LabelersPref extends v.InferInput<typeof labelersPrefSchema> {
}
export interface MutedWord extends v.InferInput<typeof mutedWordSchema> {
}
export type MutedWordTarget = v.InferInput<typeof mutedWordTargetSchema>;
export interface MutedWordsPref extends v.InferInput<typeof mutedWordsPrefSchema> {
}
export interface Nux extends v.InferInput<typeof nuxSchema> {
}
export interface PersonalDetailsPref extends v.InferInput<typeof personalDetailsPrefSchema> {
}
export interface PostInteractionSettingsPref extends v.InferInput<typeof postInteractionSettingsPrefSchema> {
}
export interface Preferences extends v.InferInput<typeof preferencesSchema> {
}
export interface ProfileAssociated extends v.InferInput<typeof profileAssociatedSchema> {
}
export interface ProfileAssociatedActivitySubscription extends v.InferInput<typeof profileAssociatedActivitySubscriptionSchema> {
}
export interface ProfileAssociatedChat extends v.InferInput<typeof profileAssociatedChatSchema> {
}
export interface ProfileView extends v.InferInput<typeof profileViewSchema> {
}
export interface ProfileViewBasic extends v.InferInput<typeof profileViewBasicSchema> {
}
export interface ProfileViewDetailed extends v.InferInput<typeof profileViewDetailedSchema> {
}
export interface SavedFeed extends v.InferInput<typeof savedFeedSchema> {
}
export interface SavedFeedsPref extends v.InferInput<typeof savedFeedsPrefSchema> {
}
export interface SavedFeedsPrefV2 extends v.InferInput<typeof savedFeedsPrefV2Schema> {
}
export interface StatusView extends v.InferInput<typeof statusViewSchema> {
}
export interface ThreadViewPref extends v.InferInput<typeof threadViewPrefSchema> {
}
export interface VerificationPrefs extends v.InferInput<typeof verificationPrefsSchema> {
}
export interface VerificationState extends v.InferInput<typeof verificationStateSchema> {
}
export interface VerificationView extends v.InferInput<typeof verificationViewSchema> {
}
export interface ViewerState extends v.InferInput<typeof viewerStateSchema> {
}
export {};
//# sourceMappingURL=defs.d.ts.map