import * as v from '@atcute/lexicons/validations';
import * as AppBskyLabelerDefs from './defs.js';
import * as ComAtprotoLabelDefs from '@atcute/atproto/types/label/defs';
import * as ComAtprotoModerationDefs from '@atcute/atproto/types/moderation/defs';
declare const _mainSchema: v.RecordSchema<v.ObjectSchema<{
    $type: v.LiteralSchema<"app.bsky.labeler.service">;
    createdAt: v.FormattedStringSchema<"datetime">;
    readonly labels: v.OptionalSchema<v.VariantSchema<readonly [ComAtprotoLabelDefs.selfLabelsSchema], boolean>, undefined>;
    readonly policies: AppBskyLabelerDefs.labelerPoliciesSchema;
    /**
     * The set of report reason 'codes' which are in-scope for this service to review and action. These usually align to policy categories. If not defined (distinct from empty array), all reason types are allowed.
     */
    readonly reasonTypes: v.OptionalSchema<v.ArraySchema<ComAtprotoModerationDefs.reasonTypeSchema>, undefined>;
    /**
     * Set of record types (collection NSIDs) which can be reported to this service. If not defined (distinct from empty array), default is any record type.
     */
    subjectCollections: v.OptionalSchema<v.ArraySchema<v.FormattedStringSchema<"nsid">>, undefined>;
    /**
     * The set of subject types (account, record, etc) this service accepts reports on.
     */
    readonly subjectTypes: v.OptionalSchema<v.ArraySchema<ComAtprotoModerationDefs.subjectTypeSchema>, undefined>;
}>, v.LiteralSchema<"self">>;
type main$schematype = typeof _mainSchema;
export interface mainSchema extends main$schematype {
}
export declare const mainSchema: mainSchema;
export interface Main extends v.InferInput<typeof mainSchema> {
}
declare module '@atcute/lexicons/ambient' {
    interface Records {
        'app.bsky.labeler.service': mainSchema;
    }
}
export {};
//# sourceMappingURL=service.d.ts.map