import * as v from '@atcute/lexicons/validations';
import * as AppBskyActorDefs from '../actor/defs.js';
declare const _likeSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.getLikes#like">, undefined>;
    readonly actor: AppBskyActorDefs.profileViewSchema;
    createdAt: v.FormattedStringSchema<"datetime">;
    indexedAt: v.FormattedStringSchema<"datetime">;
}>;
declare const _mainSchema: v.XRPCQueryMetadata<v.ObjectSchema<{
    /**
     * CID of the subject record (aka, specific version of record), to filter likes.
     */
    cid: v.OptionalSchema<v.FormattedStringSchema<"cid">, undefined>;
    cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
    /**
     * @minimum 1
     * @maximum 100
     * @default 50
     */
    limit: v.OptionalSchema<v.SchemaWithConstraint<v.IntegerSchema, readonly [v.IntegerRangeConstraint<1, 100>]>, 50>;
    /**
     * AT-URI of the subject (eg, a post record).
     */
    uri: v.FormattedStringSchema<"at-uri">;
}>, {
    type: "lex";
    schema: v.ObjectSchema<{
        cid: v.OptionalSchema<v.FormattedStringSchema<"cid">, undefined>;
        cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
        readonly likes: v.ArraySchema<likeSchema>;
        uri: v.FormattedStringSchema<"at-uri">;
    }>;
}, "app.bsky.feed.getLikes">;
type like$schematype = typeof _likeSchema;
type main$schematype = typeof _mainSchema;
export interface likeSchema extends like$schematype {
}
export interface mainSchema extends main$schematype {
}
export declare const likeSchema: likeSchema;
export declare const mainSchema: mainSchema;
export interface Like extends v.InferInput<typeof likeSchema> {
}
export interface $params extends v.InferInput<mainSchema['params']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCQueries {
        'app.bsky.feed.getLikes': mainSchema;
    }
}
export {};
//# sourceMappingURL=getLikes.d.ts.map