import * as v from '@atcute/lexicons/validations';
import * as AppBskyFeedDefs from './defs.js';
declare const _mainSchema: v.XRPCQueryMetadata<v.ObjectSchema<{
    /**
     * How many levels of reply depth should be included in response.
     * @minimum 0
     * @maximum 1000
     * @default 6
     */
    depth: v.OptionalSchema<v.SchemaWithConstraint<v.IntegerSchema, readonly [v.IntegerRangeConstraint<0, 1000>]>, 6>;
    /**
     * How many levels of parent (and grandparent, etc) post to include.
     * @minimum 0
     * @maximum 1000
     * @default 80
     */
    parentHeight: v.OptionalSchema<v.SchemaWithConstraint<v.IntegerSchema, readonly [v.IntegerRangeConstraint<0, 1000>]>, 80>;
    /**
     * Reference (AT-URI) to post record.
     */
    uri: v.FormattedStringSchema<"at-uri">;
}>, {
    type: "lex";
    schema: v.ObjectSchema<{
        readonly thread: v.VariantSchema<readonly [AppBskyFeedDefs.blockedPostSchema, AppBskyFeedDefs.notFoundPostSchema, AppBskyFeedDefs.threadViewPostSchema], boolean>;
        readonly threadgate: v.OptionalSchema<AppBskyFeedDefs.threadgateViewSchema, undefined>;
    }>;
}, "app.bsky.feed.getPostThread">;
type main$schematype = typeof _mainSchema;
export interface mainSchema extends main$schematype {
}
export declare const mainSchema: mainSchema;
export interface $params extends v.InferInput<mainSchema['params']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCQueries {
        'app.bsky.feed.getPostThread': mainSchema;
    }
}
export {};
//# sourceMappingURL=getPostThread.d.ts.map