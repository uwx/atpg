import * as v from '@atcute/lexicons/validations';
import * as AppBskyActorDefs from '../actor/defs.js';
import * as AppBskyEmbedExternal from '../embed/external.js';
import * as AppBskyEmbedImages from '../embed/images.js';
import * as AppBskyEmbedRecord from '../embed/record.js';
import * as AppBskyEmbedRecordWithMedia from '../embed/recordWithMedia.js';
import * as AppBskyEmbedVideo from '../embed/video.js';
import * as AppBskyGraphDefs from '../graph/defs.js';
import * as AppBskyRichtextFacet from '../richtext/facet.js';
import * as ComAtprotoLabelDefs from '@atcute/atproto/types/label/defs';
declare const _blockedAuthorSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.defs#blockedAuthor">, undefined>;
    did: v.FormattedStringSchema<"did">;
    readonly viewer: v.OptionalSchema<AppBskyActorDefs.viewerStateSchema, undefined>;
}>;
declare const _blockedPostSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.defs#blockedPost">, undefined>;
    readonly author: blockedAuthorSchema;
    blocked: v.LiteralSchema<true>;
    uri: v.FormattedStringSchema<"at-uri">;
}>;
declare const _clickthroughAuthorSchema: v.LiteralSchema<"app.bsky.feed.defs#clickthroughAuthor">;
declare const _clickthroughEmbedSchema: v.LiteralSchema<"app.bsky.feed.defs#clickthroughEmbed">;
declare const _clickthroughItemSchema: v.LiteralSchema<"app.bsky.feed.defs#clickthroughItem">;
declare const _clickthroughReposterSchema: v.LiteralSchema<"app.bsky.feed.defs#clickthroughReposter">;
declare const _contentModeUnspecifiedSchema: v.LiteralSchema<"app.bsky.feed.defs#contentModeUnspecified">;
declare const _contentModeVideoSchema: v.LiteralSchema<"app.bsky.feed.defs#contentModeVideo">;
declare const _feedViewPostSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.defs#feedViewPost">, undefined>;
    /**
     * Context provided by feed generator that may be passed back alongside interactions.
     * @maxLength 2000
     */
    feedContext: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 2000>]>, undefined>;
    readonly post: postViewSchema;
    readonly reason: v.OptionalSchema<v.VariantSchema<readonly [reasonPinSchema, reasonRepostSchema], boolean>, undefined>;
    readonly reply: v.OptionalSchema<replyRefSchema, undefined>;
    /**
     * Unique identifier per request that may be passed back alongside interactions.
     * @maxLength 100
     */
    reqId: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 100>]>, undefined>;
}>;
declare const _generatorViewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.defs#generatorView">, undefined>;
    acceptsInteractions: v.OptionalSchema<v.BooleanSchema, undefined>;
    avatar: v.OptionalSchema<v.FormattedStringSchema<"uri">, undefined>;
    cid: v.FormattedStringSchema<"cid">;
    contentMode: v.OptionalSchema<v.StringSchema<(string & {}) | "app.bsky.feed.defs#contentModeUnspecified" | "app.bsky.feed.defs#contentModeVideo">, undefined>;
    readonly creator: AppBskyActorDefs.profileViewSchema;
    /**
     * @maxLength 3000
     * @maxGraphemes 300
     */
    description: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 3000>, v.StringGraphemesConstraint<0, 300>]>, undefined>;
    readonly descriptionFacets: v.OptionalSchema<v.ArraySchema<AppBskyRichtextFacet.mainSchema>, undefined>;
    did: v.FormattedStringSchema<"did">;
    displayName: v.StringSchema<string>;
    indexedAt: v.FormattedStringSchema<"datetime">;
    readonly labels: v.OptionalSchema<v.ArraySchema<ComAtprotoLabelDefs.labelSchema>, undefined>;
    /**
     * @minimum 0
     */
    likeCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    uri: v.FormattedStringSchema<"at-uri">;
    readonly viewer: v.OptionalSchema<generatorViewerStateSchema, undefined>;
}>;
declare const _generatorViewerStateSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.defs#generatorViewerState">, undefined>;
    like: v.OptionalSchema<v.FormattedStringSchema<"at-uri">, undefined>;
}>;
declare const _interactionSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.defs#interaction">, undefined>;
    event: v.OptionalSchema<v.StringSchema<(string & {}) | "app.bsky.feed.defs#clickthroughAuthor" | "app.bsky.feed.defs#clickthroughEmbed" | "app.bsky.feed.defs#clickthroughItem" | "app.bsky.feed.defs#clickthroughReposter" | "app.bsky.feed.defs#interactionLike" | "app.bsky.feed.defs#interactionQuote" | "app.bsky.feed.defs#interactionReply" | "app.bsky.feed.defs#interactionRepost" | "app.bsky.feed.defs#interactionSeen" | "app.bsky.feed.defs#interactionShare" | "app.bsky.feed.defs#requestLess" | "app.bsky.feed.defs#requestMore">, undefined>;
    /**
     * Context on a feed item that was originally supplied by the feed generator on getFeedSkeleton.
     * @maxLength 2000
     */
    feedContext: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 2000>]>, undefined>;
    item: v.OptionalSchema<v.FormattedStringSchema<"at-uri">, undefined>;
    /**
     * Unique identifier per request that may be passed back alongside interactions.
     * @maxLength 100
     */
    reqId: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 100>]>, undefined>;
}>;
declare const _interactionLikeSchema: v.LiteralSchema<"app.bsky.feed.defs#interactionLike">;
declare const _interactionQuoteSchema: v.LiteralSchema<"app.bsky.feed.defs#interactionQuote">;
declare const _interactionReplySchema: v.LiteralSchema<"app.bsky.feed.defs#interactionReply">;
declare const _interactionRepostSchema: v.LiteralSchema<"app.bsky.feed.defs#interactionRepost">;
declare const _interactionSeenSchema: v.LiteralSchema<"app.bsky.feed.defs#interactionSeen">;
declare const _interactionShareSchema: v.LiteralSchema<"app.bsky.feed.defs#interactionShare">;
declare const _notFoundPostSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.defs#notFoundPost">, undefined>;
    notFound: v.LiteralSchema<true>;
    uri: v.FormattedStringSchema<"at-uri">;
}>;
declare const _postViewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.defs#postView">, undefined>;
    readonly author: AppBskyActorDefs.profileViewBasicSchema;
    bookmarkCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    cid: v.FormattedStringSchema<"cid">;
    readonly embed: v.OptionalSchema<v.VariantSchema<readonly [AppBskyEmbedExternal.viewSchema, AppBskyEmbedImages.viewSchema, AppBskyEmbedRecord.viewSchema, AppBskyEmbedRecordWithMedia.viewSchema, AppBskyEmbedVideo.viewSchema], boolean>, undefined>;
    indexedAt: v.FormattedStringSchema<"datetime">;
    readonly labels: v.OptionalSchema<v.ArraySchema<ComAtprotoLabelDefs.labelSchema>, undefined>;
    likeCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    quoteCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    record: v.UnknownSchema;
    replyCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    repostCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    readonly threadgate: v.OptionalSchema<threadgateViewSchema, undefined>;
    uri: v.FormattedStringSchema<"at-uri">;
    readonly viewer: v.OptionalSchema<viewerStateSchema, undefined>;
}>;
declare const _reasonPinSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.defs#reasonPin">, undefined>;
}>;
declare const _reasonRepostSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.defs#reasonRepost">, undefined>;
    readonly by: AppBskyActorDefs.profileViewBasicSchema;
    cid: v.OptionalSchema<v.FormattedStringSchema<"cid">, undefined>;
    indexedAt: v.FormattedStringSchema<"datetime">;
    uri: v.OptionalSchema<v.FormattedStringSchema<"at-uri">, undefined>;
}>;
declare const _replyRefSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.defs#replyRef">, undefined>;
    /**
     * When parent is a reply to another post, this is the author of that post.
     */
    readonly grandparentAuthor: v.OptionalSchema<AppBskyActorDefs.profileViewBasicSchema, undefined>;
    readonly parent: v.VariantSchema<readonly [blockedPostSchema, notFoundPostSchema, postViewSchema], boolean>;
    readonly root: v.VariantSchema<readonly [blockedPostSchema, notFoundPostSchema, postViewSchema], boolean>;
}>;
declare const _requestLessSchema: v.LiteralSchema<"app.bsky.feed.defs#requestLess">;
declare const _requestMoreSchema: v.LiteralSchema<"app.bsky.feed.defs#requestMore">;
declare const _skeletonFeedPostSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.defs#skeletonFeedPost">, undefined>;
    /**
     * Context that will be passed through to client and may be passed to feed generator back alongside interactions.
     * @maxLength 2000
     */
    feedContext: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 2000>]>, undefined>;
    post: v.FormattedStringSchema<"at-uri">;
    readonly reason: v.OptionalSchema<v.VariantSchema<readonly [skeletonReasonPinSchema, skeletonReasonRepostSchema], boolean>, undefined>;
}>;
declare const _skeletonReasonPinSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.defs#skeletonReasonPin">, undefined>;
}>;
declare const _skeletonReasonRepostSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.defs#skeletonReasonRepost">, undefined>;
    repost: v.FormattedStringSchema<"at-uri">;
}>;
declare const _threadContextSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.defs#threadContext">, undefined>;
    rootAuthorLike: v.OptionalSchema<v.FormattedStringSchema<"at-uri">, undefined>;
}>;
declare const _threadViewPostSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.defs#threadViewPost">, undefined>;
    readonly parent: v.OptionalSchema<v.VariantSchema<readonly [blockedPostSchema, notFoundPostSchema, threadViewPostSchema], boolean>, undefined>;
    readonly post: postViewSchema;
    readonly replies: v.OptionalSchema<v.ArraySchema<v.VariantSchema<readonly [blockedPostSchema, notFoundPostSchema, threadViewPostSchema], boolean>>, undefined>;
    readonly threadContext: v.OptionalSchema<threadContextSchema, undefined>;
}>;
declare const _threadgateViewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.defs#threadgateView">, undefined>;
    cid: v.OptionalSchema<v.FormattedStringSchema<"cid">, undefined>;
    readonly lists: v.OptionalSchema<v.ArraySchema<AppBskyGraphDefs.listViewBasicSchema>, undefined>;
    record: v.OptionalSchema<v.UnknownSchema, undefined>;
    uri: v.OptionalSchema<v.FormattedStringSchema<"at-uri">, undefined>;
}>;
declare const _viewerStateSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"app.bsky.feed.defs#viewerState">, undefined>;
    bookmarked: v.OptionalSchema<v.BooleanSchema, undefined>;
    embeddingDisabled: v.OptionalSchema<v.BooleanSchema, undefined>;
    like: v.OptionalSchema<v.FormattedStringSchema<"at-uri">, undefined>;
    pinned: v.OptionalSchema<v.BooleanSchema, undefined>;
    replyDisabled: v.OptionalSchema<v.BooleanSchema, undefined>;
    repost: v.OptionalSchema<v.FormattedStringSchema<"at-uri">, undefined>;
    threadMuted: v.OptionalSchema<v.BooleanSchema, undefined>;
}>;
type blockedAuthor$schematype = typeof _blockedAuthorSchema;
type blockedPost$schematype = typeof _blockedPostSchema;
type clickthroughAuthor$schematype = typeof _clickthroughAuthorSchema;
type clickthroughEmbed$schematype = typeof _clickthroughEmbedSchema;
type clickthroughItem$schematype = typeof _clickthroughItemSchema;
type clickthroughReposter$schematype = typeof _clickthroughReposterSchema;
type contentModeUnspecified$schematype = typeof _contentModeUnspecifiedSchema;
type contentModeVideo$schematype = typeof _contentModeVideoSchema;
type feedViewPost$schematype = typeof _feedViewPostSchema;
type generatorView$schematype = typeof _generatorViewSchema;
type generatorViewerState$schematype = typeof _generatorViewerStateSchema;
type interaction$schematype = typeof _interactionSchema;
type interactionLike$schematype = typeof _interactionLikeSchema;
type interactionQuote$schematype = typeof _interactionQuoteSchema;
type interactionReply$schematype = typeof _interactionReplySchema;
type interactionRepost$schematype = typeof _interactionRepostSchema;
type interactionSeen$schematype = typeof _interactionSeenSchema;
type interactionShare$schematype = typeof _interactionShareSchema;
type notFoundPost$schematype = typeof _notFoundPostSchema;
type postView$schematype = typeof _postViewSchema;
type reasonPin$schematype = typeof _reasonPinSchema;
type reasonRepost$schematype = typeof _reasonRepostSchema;
type replyRef$schematype = typeof _replyRefSchema;
type requestLess$schematype = typeof _requestLessSchema;
type requestMore$schematype = typeof _requestMoreSchema;
type skeletonFeedPost$schematype = typeof _skeletonFeedPostSchema;
type skeletonReasonPin$schematype = typeof _skeletonReasonPinSchema;
type skeletonReasonRepost$schematype = typeof _skeletonReasonRepostSchema;
type threadContext$schematype = typeof _threadContextSchema;
type threadViewPost$schematype = typeof _threadViewPostSchema;
type threadgateView$schematype = typeof _threadgateViewSchema;
type viewerState$schematype = typeof _viewerStateSchema;
export interface blockedAuthorSchema extends blockedAuthor$schematype {
}
export interface blockedPostSchema extends blockedPost$schematype {
}
export interface clickthroughAuthorSchema extends clickthroughAuthor$schematype {
}
export interface clickthroughEmbedSchema extends clickthroughEmbed$schematype {
}
export interface clickthroughItemSchema extends clickthroughItem$schematype {
}
export interface clickthroughReposterSchema extends clickthroughReposter$schematype {
}
export interface contentModeUnspecifiedSchema extends contentModeUnspecified$schematype {
}
export interface contentModeVideoSchema extends contentModeVideo$schematype {
}
export interface feedViewPostSchema extends feedViewPost$schematype {
}
export interface generatorViewSchema extends generatorView$schematype {
}
export interface generatorViewerStateSchema extends generatorViewerState$schematype {
}
export interface interactionSchema extends interaction$schematype {
}
export interface interactionLikeSchema extends interactionLike$schematype {
}
export interface interactionQuoteSchema extends interactionQuote$schematype {
}
export interface interactionReplySchema extends interactionReply$schematype {
}
export interface interactionRepostSchema extends interactionRepost$schematype {
}
export interface interactionSeenSchema extends interactionSeen$schematype {
}
export interface interactionShareSchema extends interactionShare$schematype {
}
export interface notFoundPostSchema extends notFoundPost$schematype {
}
export interface postViewSchema extends postView$schematype {
}
export interface reasonPinSchema extends reasonPin$schematype {
}
export interface reasonRepostSchema extends reasonRepost$schematype {
}
export interface replyRefSchema extends replyRef$schematype {
}
export interface requestLessSchema extends requestLess$schematype {
}
export interface requestMoreSchema extends requestMore$schematype {
}
export interface skeletonFeedPostSchema extends skeletonFeedPost$schematype {
}
export interface skeletonReasonPinSchema extends skeletonReasonPin$schematype {
}
export interface skeletonReasonRepostSchema extends skeletonReasonRepost$schematype {
}
export interface threadContextSchema extends threadContext$schematype {
}
export interface threadViewPostSchema extends threadViewPost$schematype {
}
export interface threadgateViewSchema extends threadgateView$schematype {
}
export interface viewerStateSchema extends viewerState$schematype {
}
export declare const blockedAuthorSchema: blockedAuthorSchema;
export declare const blockedPostSchema: blockedPostSchema;
export declare const clickthroughAuthorSchema: clickthroughAuthorSchema;
export declare const clickthroughEmbedSchema: clickthroughEmbedSchema;
export declare const clickthroughItemSchema: clickthroughItemSchema;
export declare const clickthroughReposterSchema: clickthroughReposterSchema;
export declare const contentModeUnspecifiedSchema: contentModeUnspecifiedSchema;
export declare const contentModeVideoSchema: contentModeVideoSchema;
export declare const feedViewPostSchema: feedViewPostSchema;
export declare const generatorViewSchema: generatorViewSchema;
export declare const generatorViewerStateSchema: generatorViewerStateSchema;
export declare const interactionSchema: interactionSchema;
export declare const interactionLikeSchema: interactionLikeSchema;
export declare const interactionQuoteSchema: interactionQuoteSchema;
export declare const interactionReplySchema: interactionReplySchema;
export declare const interactionRepostSchema: interactionRepostSchema;
export declare const interactionSeenSchema: interactionSeenSchema;
export declare const interactionShareSchema: interactionShareSchema;
export declare const notFoundPostSchema: notFoundPostSchema;
export declare const postViewSchema: postViewSchema;
export declare const reasonPinSchema: reasonPinSchema;
export declare const reasonRepostSchema: reasonRepostSchema;
export declare const replyRefSchema: replyRefSchema;
export declare const requestLessSchema: requestLessSchema;
export declare const requestMoreSchema: requestMoreSchema;
export declare const skeletonFeedPostSchema: skeletonFeedPostSchema;
export declare const skeletonReasonPinSchema: skeletonReasonPinSchema;
export declare const skeletonReasonRepostSchema: skeletonReasonRepostSchema;
export declare const threadContextSchema: threadContextSchema;
export declare const threadViewPostSchema: threadViewPostSchema;
export declare const threadgateViewSchema: threadgateViewSchema;
export declare const viewerStateSchema: viewerStateSchema;
export interface BlockedAuthor extends v.InferInput<typeof blockedAuthorSchema> {
}
export interface BlockedPost extends v.InferInput<typeof blockedPostSchema> {
}
export type ClickthroughAuthor = v.InferInput<typeof clickthroughAuthorSchema>;
export type ClickthroughEmbed = v.InferInput<typeof clickthroughEmbedSchema>;
export type ClickthroughItem = v.InferInput<typeof clickthroughItemSchema>;
export type ClickthroughReposter = v.InferInput<typeof clickthroughReposterSchema>;
export type ContentModeUnspecified = v.InferInput<typeof contentModeUnspecifiedSchema>;
export type ContentModeVideo = v.InferInput<typeof contentModeVideoSchema>;
export interface FeedViewPost extends v.InferInput<typeof feedViewPostSchema> {
}
export interface GeneratorView extends v.InferInput<typeof generatorViewSchema> {
}
export interface GeneratorViewerState extends v.InferInput<typeof generatorViewerStateSchema> {
}
export interface Interaction extends v.InferInput<typeof interactionSchema> {
}
export type InteractionLike = v.InferInput<typeof interactionLikeSchema>;
export type InteractionQuote = v.InferInput<typeof interactionQuoteSchema>;
export type InteractionReply = v.InferInput<typeof interactionReplySchema>;
export type InteractionRepost = v.InferInput<typeof interactionRepostSchema>;
export type InteractionSeen = v.InferInput<typeof interactionSeenSchema>;
export type InteractionShare = v.InferInput<typeof interactionShareSchema>;
export interface NotFoundPost extends v.InferInput<typeof notFoundPostSchema> {
}
export interface PostView extends v.InferInput<typeof postViewSchema> {
}
export interface ReasonPin extends v.InferInput<typeof reasonPinSchema> {
}
export interface ReasonRepost extends v.InferInput<typeof reasonRepostSchema> {
}
export interface ReplyRef extends v.InferInput<typeof replyRefSchema> {
}
export type RequestLess = v.InferInput<typeof requestLessSchema>;
export type RequestMore = v.InferInput<typeof requestMoreSchema>;
export interface SkeletonFeedPost extends v.InferInput<typeof skeletonFeedPostSchema> {
}
export interface SkeletonReasonPin extends v.InferInput<typeof skeletonReasonPinSchema> {
}
export interface SkeletonReasonRepost extends v.InferInput<typeof skeletonReasonRepostSchema> {
}
export interface ThreadContext extends v.InferInput<typeof threadContextSchema> {
}
export interface ThreadViewPost extends v.InferInput<typeof threadViewPostSchema> {
}
export interface ThreadgateView extends v.InferInput<typeof threadgateViewSchema> {
}
export interface ViewerState extends v.InferInput<typeof viewerStateSchema> {
}
export {};
//# sourceMappingURL=defs.d.ts.map