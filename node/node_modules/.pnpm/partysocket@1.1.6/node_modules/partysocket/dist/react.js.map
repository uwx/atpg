{"version":3,"sources":["/home/runner/work/partykit/partykit/packages/partysocket/dist/react.js","../src/react.ts"],"names":["options"],"mappings":"AAAA;AACE;AACF,sDAA4B;AAC5B;AACE;AACA;AACA;AACA;AACF,sDAA4B;AAC5B,+BAA4B;AAC5B;AACA;ACKe,SAAR,cAAA,CAAgC,OAAA,EAAgC;AACrE,EAAA,MAAM,EAAE,IAAA,EAAM,GAAG,aAAa,EAAA,EAAI,OAAA;AAElC,EAAA,MAAM,OAAA,EAAS,8CAAA;AAAgB,IAC7B,OAAA,EAAS;AAAA,MACP,IAAA,EACE,KAAA,GAAA,CACC,OAAO,OAAA,IAAW,YAAA,EACf,MAAA,CAAO,QAAA,CAAS,KAAA,EAChB,kBAAA,CAAA;AAAA,MACN,GAAG;AAAA,IACL,CAAA;AAAA,IACA,YAAA,EAAc,CAACA,QAAAA,EAAAA,GAAY,IAAI,iCAAA,CAAYA,QAAO,CAAA;AAAA,IAClD,mBAAA,EAAqB,CAACA,QAAAA,EAAAA,GACpB,IAAA,CAAK,SAAA,CAAU;AAAA;AAAA;AAAA,MAGbA,QAAAA,CAAQ,KAAA;AAAA,MACRA,QAAAA,CAAQ,EAAA;AAAA,MACRA,QAAAA,CAAQ,IAAA;AAAA,MACRA,QAAAA,CAAQ,IAAA;AAAA,MACRA,QAAAA,CAAQ,KAAA;AAAA,MACRA,QAAAA,CAAQ,IAAA;AAAA,MACRA,QAAAA,CAAQ,QAAA;AAAA,MACRA,QAAAA,CAAQ,SAAA;AAAA,MACRA,QAAAA,CAAQ,QAAA;AAAA,MACRA,QAAAA,CAAQ,MAAA;AAAA,MACR,GAAG,0EAAA,QAAmD;AAAA,IACxD,CAAC;AAAA,EACL,CAAC,CAAA;AAED,EAAA,8DAAA,MAAgC,EAAQ,OAAO,CAAA;AAE/C,EAAA,OAAO,MAAA;AACT;ADXA;AACE;AACA;AACA;AACF,gIAAC","file":"/home/runner/work/partykit/partykit/packages/partysocket/dist/react.js","sourcesContent":[null,"import PartySocket from \"./index\";\nimport { useAttachWebSocketEventHandlers } from \"./use-handlers\";\nimport {\n  getOptionsThatShouldCauseRestartWhenChanged,\n  useStableSocket\n} from \"./use-socket\";\n\nimport type { PartySocketOptions } from \"./index\";\nimport type { EventHandlerOptions } from \"./use-handlers\";\n\ntype UsePartySocketOptions = Omit<PartySocketOptions, \"host\"> &\n  EventHandlerOptions & {\n    host?: string | undefined;\n  };\n\n// A React hook that wraps PartySocket\nexport default function usePartySocket(options: UsePartySocketOptions) {\n  const { host, ...otherOptions } = options;\n\n  const socket = useStableSocket({\n    options: {\n      host:\n        host ||\n        (typeof window !== \"undefined\"\n          ? window.location.host\n          : \"dummy-domain.com\"),\n      ...otherOptions\n    },\n    createSocket: (options) => new PartySocket(options),\n    createSocketMemoKey: (options) =>\n      JSON.stringify([\n        // NOTE: if query is defined as a function, the socket\n        // won't reconnect when you change the function identity\n        options.query,\n        options.id,\n        options.host,\n        options.room,\n        options.party,\n        options.path,\n        options.protocol,\n        options.protocols,\n        options.basePath,\n        options.prefix,\n        ...getOptionsThatShouldCauseRestartWhenChanged(options)\n      ])\n  });\n\n  useAttachWebSocketEventHandlers(socket, options);\n\n  return socket;\n}\n\nexport { default as useWebSocket } from \"./use-ws\";\n\n// TODO: remove the default export in a future breaking change\nexport { usePartySocket };\n"]}