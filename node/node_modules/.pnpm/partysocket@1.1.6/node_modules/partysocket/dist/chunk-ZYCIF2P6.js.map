{"version":3,"sources":["/home/runner/work/partykit/partykit/packages/partysocket/dist/chunk-ZYCIF2P6.js","../src/index.ts"],"names":[],"mappings":"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","file":"/home/runner/work/partykit/partykit/packages/partysocket/dist/chunk-ZYCIF2P6.js","sourcesContent":[null,"import ReconnectingWebSocket from \"./ws\";\n\nimport type * as RWS from \"./ws\";\n\ntype Maybe<T> = T | null | undefined;\ntype Params = Record<string, Maybe<string>>;\nconst valueIsNotNil = <T>(\n  keyValuePair: [string, Maybe<T>]\n): keyValuePair is [string, T] =>\n  keyValuePair[1] !== null && keyValuePair[1] !== undefined;\n\nexport type PartySocketOptions = Omit<RWS.Options, \"constructor\"> & {\n  id?: string; // the id of the client\n  host: string; // base url for the party\n  room?: string; // the room to connect to\n  party?: string; // the party to connect to (defaults to main)\n  basePath?: string; // the base path to use for the party\n  prefix?: string; // the prefix to use for the party\n  protocol?: \"ws\" | \"wss\";\n  protocols?: string[];\n  path?: string; // the path to connect to\n  query?: Params | (() => Params | Promise<Params>);\n  disableNameValidation?: boolean; // disable validation of party/room names\n  // headers\n};\n\nexport type PartyFetchOptions = {\n  host: string; // base url for the party\n  room: string; // the room to connect to\n  party?: string; // the party to fetch from (defaults to main)\n  basePath?: string; // the base path to use for the party\n  prefix?: string; // the prefix to use for the party\n  path?: string; // the path to fetch from\n  protocol?: \"http\" | \"https\";\n  query?: Params | (() => Params | Promise<Params>);\n  fetch?: typeof fetch;\n};\n\nfunction generateUUID(): string {\n  // Public Domain/MIT\n  if (crypto?.randomUUID) {\n    return crypto.randomUUID();\n  }\n  let d = Date.now(); //Timestamp\n  let d2 = (performance?.now && performance.now() * 1000) || 0; //Time in microseconds since page-load or 0 if unsupported\n  // biome-ignore lint/complexity/useArrowFunction: it's fine\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n    let r = Math.random() * 16; //random number between 0 and 16\n    if (d > 0) {\n      //Use timestamp until depleted\n      r = (d + r) % 16 | 0;\n      d = Math.floor(d / 16);\n    } else {\n      //Use microseconds since page-load if supported\n      r = (d2 + r) % 16 | 0;\n      d2 = Math.floor(d2 / 16);\n    }\n    return (c === \"x\" ? r : (r & 0x3) | 0x8).toString(16);\n  });\n}\n\nfunction getPartyInfo(\n  partySocketOptions: PartySocketOptions | PartyFetchOptions,\n  defaultProtocol: \"http\" | \"ws\",\n  defaultParams: Record<string, string> = {}\n) {\n  const {\n    host: rawHost,\n    path: rawPath,\n    protocol: rawProtocol,\n    room,\n    party,\n    basePath,\n    prefix,\n    query\n  } = partySocketOptions;\n\n  // strip the protocol from the beginning of `host` if any\n  let host = rawHost.replace(/^(http|https|ws|wss):\\/\\//, \"\");\n  // if user provided a trailing slash, remove it\n  if (host.endsWith(\"/\")) {\n    host = host.slice(0, -1);\n  }\n\n  if (rawPath?.startsWith(\"/\")) {\n    throw new Error(\"path must not start with a slash\");\n  }\n\n  const name = party ?? \"main\";\n  const path = rawPath ? `/${rawPath}` : \"\";\n  const protocol =\n    rawProtocol ||\n    (host.startsWith(\"localhost:\") ||\n    host.startsWith(\"127.0.0.1:\") ||\n    host.startsWith(\"192.168.\") ||\n    host.startsWith(\"10.\") ||\n    (host.startsWith(\"172.\") &&\n      host.split(\".\")[1] >= \"16\" &&\n      host.split(\".\")[1] <= \"31\") ||\n    host.startsWith(\"[::ffff:7f00:1]:\")\n      ? // http / ws\n        defaultProtocol\n      : // https / wss\n        `${defaultProtocol}s`);\n\n  const baseUrl = `${protocol}://${host}/${basePath || `${prefix || \"parties\"}/${name}/${room}`}${path}`;\n\n  const makeUrl = (query: Params = {}) =>\n    `${baseUrl}?${new URLSearchParams([\n      ...Object.entries(defaultParams),\n      ...Object.entries(query).filter(valueIsNotNil)\n    ])}`;\n\n  // allow urls to be defined as functions\n  const urlProvider =\n    typeof query === \"function\"\n      ? async () => makeUrl(await query())\n      : makeUrl(query);\n\n  return {\n    host,\n    path,\n    room,\n    name,\n    protocol,\n    partyUrl: baseUrl,\n    urlProvider\n  };\n}\n\n// things that nathanboktae/robust-websocket claims are better:\n// doesn't do anything in offline mode (?)\n// \"natively aware of error codes\"\n// can do custom reconnect strategies\n\n// TODO: incorporate the above notes\nexport default class PartySocket extends ReconnectingWebSocket {\n  _pk!: string;\n  _pkurl!: string;\n  name!: string;\n  room?: string;\n  host!: string;\n  path!: string;\n\n  constructor(readonly partySocketOptions: PartySocketOptions) {\n    const wsOptions = getWSOptions(partySocketOptions);\n\n    super(wsOptions.urlProvider, wsOptions.protocols, wsOptions.socketOptions);\n\n    this.setWSProperties(wsOptions);\n\n    if (!partySocketOptions.disableNameValidation) {\n      if (partySocketOptions.party?.includes(\"/\")) {\n        console.warn(\n          `PartySocket: party name \"${partySocketOptions.party}\" contains forward slash which may cause routing issues. Consider using a name without forward slashes or set disableNameValidation: true to bypass this warning.`\n        );\n      }\n      if (partySocketOptions.room?.includes(\"/\")) {\n        console.warn(\n          `PartySocket: room name \"${partySocketOptions.room}\" contains forward slash which may cause routing issues. Consider using a name without forward slashes or set disableNameValidation: true to bypass this warning.`\n        );\n      }\n    }\n  }\n\n  public updateProperties(partySocketOptions: Partial<PartySocketOptions>) {\n    const wsOptions = getWSOptions({\n      ...this.partySocketOptions,\n      ...partySocketOptions,\n      host: partySocketOptions.host ?? this.host,\n      room: partySocketOptions.room ?? this.room,\n      path: partySocketOptions.path ?? this.path\n    });\n\n    this._url = wsOptions.urlProvider;\n    this._protocols = wsOptions.protocols;\n    this._options = wsOptions.socketOptions;\n\n    this.setWSProperties(wsOptions);\n  }\n\n  private setWSProperties(wsOptions: ReturnType<typeof getWSOptions>) {\n    const { _pk, _pkurl, name, room, host, path } = wsOptions;\n\n    this._pk = _pk;\n    this._pkurl = _pkurl;\n    this.name = name;\n    this.room = room;\n    this.host = host;\n    this.path = path;\n  }\n\n  public reconnect(\n    code?: number | undefined,\n    reason?: string | undefined\n  ): void {\n    if (!this.room || !this.host) {\n      throw new Error(\n        \"The room and host must be set before connecting, use `updateProperties` method to set them or pass them to the constructor.\"\n      );\n    }\n    super.reconnect(code, reason);\n  }\n\n  get id() {\n    return this._pk;\n  }\n\n  /**\n   * Exposes the static PartyKit room URL without applying query parameters.\n   * To access the currently connected WebSocket url, use PartySocket#url.\n   */\n  get roomUrl(): string {\n    return this._pkurl;\n  }\n\n  // a `fetch` method that uses (almost) the same options as `PartySocket`\n  static async fetch(\n    options: PartyFetchOptions,\n    init?: RequestInit\n  ): Promise<Response> {\n    const party = getPartyInfo(options, \"http\");\n    const url =\n      typeof party.urlProvider === \"string\"\n        ? party.urlProvider\n        : await party.urlProvider();\n    const doFetch = options.fetch ?? fetch;\n    return doFetch(url, init);\n  }\n}\n\nexport { PartySocket };\n\nexport { ReconnectingWebSocket as WebSocket };\n\nfunction getWSOptions(partySocketOptions: PartySocketOptions) {\n  const {\n    id,\n    host: _host,\n    path: _path,\n    party: _party,\n    room: _room,\n    protocol: _protocol,\n    query: _query,\n    protocols,\n    ...socketOptions\n  } = partySocketOptions;\n\n  const _pk = id || generateUUID();\n  const party = getPartyInfo(partySocketOptions, \"ws\", { _pk });\n\n  return {\n    _pk: _pk,\n    _pkurl: party.partyUrl,\n    name: party.name,\n    room: party.room,\n    host: party.host,\n    path: party.path,\n    protocols: protocols,\n    socketOptions: socketOptions,\n    urlProvider: party.urlProvider\n  };\n}\n"]}