{"version":3,"sources":["/home/runner/work/partykit/partykit/packages/partysocket/dist/chunk-FCGNWPJI.js","../src/ws.ts"],"names":["evt","_a"],"mappings":"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","file":"/home/runner/work/partykit/partykit/packages/partysocket/dist/chunk-FCGNWPJI.js","sourcesContent":[null,"// TODO: lose this eslint-disable\n\n/*!\n * Reconnecting WebSocket\n * by Pedro Ladaria <pedro.ladaria@gmail.com>\n * https://github.com/pladaria/reconnecting-websocket\n * License MIT\n */\n\nimport type { TypedEventTarget } from \"./type-helper\";\n\nif (!globalThis.EventTarget || !globalThis.Event) {\n  console.error(`\n  PartySocket requires a global 'EventTarget' class to be available!\n  You can polyfill this global by adding this to your code before any partysocket imports: \n  \n  \\`\\`\\`\n  import 'partysocket/event-target-polyfill';\n  \\`\\`\\`\n  Please file an issue at https://github.com/partykit/partykit if you're still having trouble.\n`);\n}\n\nexport class ErrorEvent extends Event {\n  public message: string;\n  public error: Error;\n  // biome-ignore lint/suspicious/noExplicitAny: vibes\n  constructor(error: Error, target: any) {\n    super(\"error\", target);\n    this.message = error.message;\n    this.error = error;\n  }\n}\n\nexport class CloseEvent extends Event {\n  public code: number;\n  public reason: string;\n  public wasClean = true;\n  // biome-ignore lint/suspicious/noExplicitAny: legacy\n  constructor(code = 1000, reason = \"\", target: any) {\n    super(\"close\", target);\n    this.code = code;\n    this.reason = reason;\n  }\n}\nexport interface WebSocketEventMap {\n  close: CloseEvent;\n  error: ErrorEvent;\n  message: MessageEvent;\n  open: Event;\n}\n\nconst Events = {\n  Event,\n  ErrorEvent,\n  CloseEvent\n};\n\nfunction assert(condition: unknown, msg?: string): asserts condition {\n  if (!condition) {\n    throw new Error(msg);\n  }\n}\n\nfunction cloneEventBrowser(e: Event) {\n  // biome-ignore lint/suspicious/noExplicitAny: legacy\n  return new (e as any).constructor(e.type, e) as Event;\n}\n\nfunction cloneEventNode(e: Event) {\n  if (\"data\" in e) {\n    const evt = new MessageEvent(e.type, e);\n    return evt;\n  }\n\n  if (\"code\" in e || \"reason\" in e) {\n    const evt = new CloseEvent(\n      // @ts-expect-error we need to fix event/listener types\n      (e.code || 1999) as number,\n      // @ts-expect-error we need to fix event/listener types\n      (e.reason || \"unknown reason\") as string,\n      e\n    );\n    return evt;\n  }\n\n  if (\"error\" in e) {\n    const evt = new ErrorEvent(e.error as Error, e);\n    return evt;\n  }\n\n  const evt = new Event(e.type, e);\n  return evt;\n}\n\nconst isNode =\n  typeof process !== \"undefined\" &&\n  typeof process.versions?.node !== \"undefined\" &&\n  typeof document === \"undefined\";\n\nconst cloneEvent = isNode ? cloneEventNode : cloneEventBrowser;\n\nexport type Options = {\n  // biome-ignore lint/suspicious/noExplicitAny: legacy\n  WebSocket?: any;\n  maxReconnectionDelay?: number;\n  minReconnectionDelay?: number;\n  reconnectionDelayGrowFactor?: number;\n  minUptime?: number;\n  connectionTimeout?: number;\n  maxRetries?: number;\n  maxEnqueuedMessages?: number;\n  startClosed?: boolean;\n  debug?: boolean;\n  // biome-ignore lint/suspicious/noExplicitAny: legacy\n  debugLogger?: (...args: any[]) => void;\n};\n\nconst DEFAULT = {\n  maxReconnectionDelay: 10000,\n  minReconnectionDelay: 1000 + Math.random() * 4000,\n  minUptime: 5000,\n  reconnectionDelayGrowFactor: 1.3,\n  connectionTimeout: 4000,\n  maxRetries: Number.POSITIVE_INFINITY,\n  maxEnqueuedMessages: Number.POSITIVE_INFINITY,\n  startClosed: false,\n  debug: false\n};\n\nlet didWarnAboutMissingWebSocket = false;\n\nexport type UrlProvider = string | (() => string) | (() => Promise<string>);\nexport type ProtocolsProvider =\n  | null\n  | string\n  | string[]\n  | (() => string | string[] | null)\n  | (() => Promise<string | string[] | null>);\n\nexport type Message = string | ArrayBuffer | Blob | ArrayBufferView;\n\nexport default class ReconnectingWebSocket extends (EventTarget as TypedEventTarget<WebSocketEventMap>) {\n  private _ws: WebSocket | undefined;\n  private _retryCount = -1;\n  private _uptimeTimeout: ReturnType<typeof setTimeout> | undefined;\n  private _connectTimeout: ReturnType<typeof setTimeout> | undefined;\n  private _shouldReconnect = true;\n  private _connectLock = false;\n  private _binaryType: BinaryType = \"blob\";\n  private _closeCalled = false;\n  private _messageQueue: Message[] = [];\n\n  private _debugLogger = console.log.bind(console);\n\n  protected _url: UrlProvider;\n  protected _protocols?: ProtocolsProvider;\n  protected _options: Options;\n\n  constructor(\n    url: UrlProvider,\n    protocols?: ProtocolsProvider,\n    options: Options = {}\n  ) {\n    super();\n    this._url = url;\n    this._protocols = protocols;\n    this._options = options;\n    if (this._options.startClosed) {\n      this._shouldReconnect = false;\n    }\n    if (this._options.debugLogger) {\n      this._debugLogger = this._options.debugLogger;\n    }\n    this._connect();\n  }\n\n  static get CONNECTING() {\n    return 0;\n  }\n  static get OPEN() {\n    return 1;\n  }\n  static get CLOSING() {\n    return 2;\n  }\n  static get CLOSED() {\n    return 3;\n  }\n\n  get CONNECTING() {\n    return ReconnectingWebSocket.CONNECTING;\n  }\n  get OPEN() {\n    return ReconnectingWebSocket.OPEN;\n  }\n  get CLOSING() {\n    return ReconnectingWebSocket.CLOSING;\n  }\n  get CLOSED() {\n    return ReconnectingWebSocket.CLOSED;\n  }\n\n  get binaryType() {\n    return this._ws ? this._ws.binaryType : this._binaryType;\n  }\n\n  set binaryType(value: BinaryType) {\n    this._binaryType = value;\n    if (this._ws) {\n      this._ws.binaryType = value;\n    }\n  }\n\n  /**\n   * Returns the number or connection retries\n   */\n  get retryCount(): number {\n    return Math.max(this._retryCount, 0);\n  }\n\n  /**\n   * The number of bytes of data that have been queued using calls to send() but not yet\n   * transmitted to the network. This value resets to zero once all queued data has been sent.\n   * This value does not reset to zero when the connection is closed; if you keep calling send(),\n   * this will continue to climb. Read only\n   */\n  get bufferedAmount(): number {\n    const bytes = this._messageQueue.reduce((acc, message) => {\n      if (typeof message === \"string\") {\n        acc += message.length; // not byte size\n      } else if (message instanceof Blob) {\n        acc += message.size;\n      } else {\n        acc += message.byteLength;\n      }\n      return acc;\n    }, 0);\n    return bytes + (this._ws ? this._ws.bufferedAmount : 0);\n  }\n\n  /**\n   * The extensions selected by the server. This is currently only the empty string or a list of\n   * extensions as negotiated by the connection\n   */\n  get extensions(): string {\n    return this._ws ? this._ws.extensions : \"\";\n  }\n\n  /**\n   * A string indicating the name of the sub-protocol the server selected;\n   * this will be one of the strings specified in the protocols parameter when creating the\n   * WebSocket object\n   */\n  get protocol(): string {\n    return this._ws ? this._ws.protocol : \"\";\n  }\n\n  /**\n   * The current state of the connection; this is one of the Ready state constants\n   */\n  get readyState(): number {\n    if (this._ws) {\n      return this._ws.readyState;\n    }\n    return this._options.startClosed\n      ? ReconnectingWebSocket.CLOSED\n      : ReconnectingWebSocket.CONNECTING;\n  }\n\n  /**\n   * The URL as resolved by the constructor\n   */\n  get url(): string {\n    return this._ws ? this._ws.url : \"\";\n  }\n\n  /**\n   * Whether the websocket object is now in reconnectable state\n   */\n  get shouldReconnect(): boolean {\n    return this._shouldReconnect;\n  }\n\n  /**\n   * An event listener to be called when the WebSocket connection's readyState changes to CLOSED\n   */\n  public onclose: ((event: CloseEvent) => void) | null = null;\n\n  /**\n   * An event listener to be called when an error occurs\n   */\n  public onerror: ((event: ErrorEvent) => void) | null = null;\n\n  /**\n   * An event listener to be called when a message is received from the server\n   */\n  public onmessage: ((event: MessageEvent) => void) | null = null;\n\n  /**\n   * An event listener to be called when the WebSocket connection's readyState changes to OPEN;\n   * this indicates that the connection is ready to send and receive data\n   */\n  public onopen: ((event: Event) => void) | null = null;\n\n  /**\n   * Closes the WebSocket connection or connection attempt, if any. If the connection is already\n   * CLOSED, this method does nothing\n   */\n  public close(code = 1000, reason?: string) {\n    this._closeCalled = true;\n    this._shouldReconnect = false;\n    this._clearTimeouts();\n    if (!this._ws) {\n      this._debug(\"close enqueued: no ws instance\");\n      return;\n    }\n    if (this._ws.readyState === this.CLOSED) {\n      this._debug(\"close: already closed\");\n      return;\n    }\n    this._ws.close(code, reason);\n  }\n\n  /**\n   * Closes the WebSocket connection or connection attempt and connects again.\n   * Resets retry counter;\n   */\n  public reconnect(code?: number, reason?: string) {\n    this._shouldReconnect = true;\n    this._closeCalled = false;\n    this._retryCount = -1;\n    if (!this._ws || this._ws.readyState === this.CLOSED) {\n      this._connect();\n    } else {\n      this._disconnect(code, reason);\n      this._connect();\n    }\n  }\n\n  /**\n   * Enqueue specified data to be transmitted to the server over the WebSocket connection\n   */\n  public send(data: Message) {\n    if (this._ws && this._ws.readyState === this.OPEN) {\n      this._debug(\"send\", data);\n      this._ws.send(data);\n    } else {\n      const { maxEnqueuedMessages = DEFAULT.maxEnqueuedMessages } =\n        this._options;\n      if (this._messageQueue.length < maxEnqueuedMessages) {\n        this._debug(\"enqueue\", data);\n        this._messageQueue.push(data);\n      }\n    }\n  }\n\n  private _debug(...args: unknown[]) {\n    if (this._options.debug) {\n      this._debugLogger(\"RWS>\", ...args);\n    }\n  }\n\n  private _getNextDelay() {\n    const {\n      reconnectionDelayGrowFactor = DEFAULT.reconnectionDelayGrowFactor,\n      minReconnectionDelay = DEFAULT.minReconnectionDelay,\n      maxReconnectionDelay = DEFAULT.maxReconnectionDelay\n    } = this._options;\n    let delay = 0;\n    if (this._retryCount > 0) {\n      delay =\n        minReconnectionDelay *\n        reconnectionDelayGrowFactor ** (this._retryCount - 1);\n      if (delay > maxReconnectionDelay) {\n        delay = maxReconnectionDelay;\n      }\n    }\n    this._debug(\"next delay\", delay);\n    return delay;\n  }\n\n  private _wait(): Promise<void> {\n    return new Promise((resolve) => {\n      setTimeout(resolve, this._getNextDelay());\n    });\n  }\n\n  private _getNextProtocols(\n    protocolsProvider: ProtocolsProvider | null\n  ): Promise<string | string[] | null> {\n    if (!protocolsProvider) return Promise.resolve(null);\n\n    if (\n      typeof protocolsProvider === \"string\" ||\n      Array.isArray(protocolsProvider)\n    ) {\n      return Promise.resolve(protocolsProvider);\n    }\n\n    if (typeof protocolsProvider === \"function\") {\n      const protocols = protocolsProvider();\n      if (!protocols) return Promise.resolve(null);\n\n      if (typeof protocols === \"string\" || Array.isArray(protocols)) {\n        return Promise.resolve(protocols);\n      }\n\n      // @ts-expect-error redundant check\n      if (protocols.then) {\n        return protocols;\n      }\n    }\n\n    throw Error(\"Invalid protocols\");\n  }\n\n  private _getNextUrl(urlProvider: UrlProvider): Promise<string> {\n    if (typeof urlProvider === \"string\") {\n      return Promise.resolve(urlProvider);\n    }\n    if (typeof urlProvider === \"function\") {\n      const url = urlProvider();\n      if (typeof url === \"string\") {\n        return Promise.resolve(url);\n      }\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      if (url.then) {\n        return url;\n      }\n\n      // return url;\n    }\n    throw Error(\"Invalid URL\");\n  }\n\n  private _connect() {\n    if (this._connectLock || !this._shouldReconnect) {\n      return;\n    }\n    this._connectLock = true;\n\n    const {\n      maxRetries = DEFAULT.maxRetries,\n      connectionTimeout = DEFAULT.connectionTimeout\n    } = this._options;\n\n    if (this._retryCount >= maxRetries) {\n      this._debug(\"max retries reached\", this._retryCount, \">=\", maxRetries);\n      return;\n    }\n\n    this._retryCount++;\n\n    this._debug(\"connect\", this._retryCount);\n    this._removeListeners();\n\n    this._wait()\n      .then(() =>\n        Promise.all([\n          this._getNextUrl(this._url),\n          this._getNextProtocols(this._protocols || null)\n        ])\n      )\n      .then(([url, protocols]) => {\n        // close could be called before creating the ws\n        if (this._closeCalled) {\n          this._connectLock = false;\n          return;\n        }\n        if (\n          !this._options.WebSocket &&\n          typeof WebSocket === \"undefined\" &&\n          !didWarnAboutMissingWebSocket\n        ) {\n          console.error(`‼️ No WebSocket implementation available. You should define options.WebSocket. \n\nFor example, if you're using node.js, run \\`npm install ws\\`, and then in your code:\n\nimport PartySocket from 'partysocket';\nimport WS from 'ws';\n\nconst partysocket = new PartySocket({\n  host: \"127.0.0.1:1999\",\n  room: \"test-room\",\n  WebSocket: WS\n});\n\n`);\n          didWarnAboutMissingWebSocket = true;\n        }\n        const WS: typeof WebSocket = this._options.WebSocket || WebSocket;\n        this._debug(\"connect\", { url, protocols });\n        this._ws = protocols ? new WS(url, protocols) : new WS(url);\n\n        this._ws.binaryType = this._binaryType;\n        this._connectLock = false;\n        this._addListeners();\n\n        this._connectTimeout = setTimeout(\n          () => this._handleTimeout(),\n          connectionTimeout\n        );\n      })\n      // via https://github.com/pladaria/reconnecting-websocket/pull/166\n      .catch((err) => {\n        this._connectLock = false;\n        this._handleError(new Events.ErrorEvent(Error(err.message), this));\n      });\n  }\n\n  private _handleTimeout() {\n    this._debug(\"timeout event\");\n    this._handleError(new Events.ErrorEvent(Error(\"TIMEOUT\"), this));\n  }\n\n  private _disconnect(code = 1000, reason?: string) {\n    this._clearTimeouts();\n    if (!this._ws) {\n      return;\n    }\n    this._removeListeners();\n    try {\n      if (\n        this._ws.readyState === this.OPEN ||\n        this._ws.readyState === this.CONNECTING\n      ) {\n        this._ws.close(code, reason);\n      }\n      this._handleClose(new Events.CloseEvent(code, reason, this));\n    } catch (_error) {\n      // ignore\n    }\n  }\n\n  private _acceptOpen() {\n    this._debug(\"accept open\");\n    this._retryCount = 0;\n  }\n\n  private _handleOpen = (event: Event) => {\n    this._debug(\"open event\");\n    const { minUptime = DEFAULT.minUptime } = this._options;\n\n    clearTimeout(this._connectTimeout);\n    this._uptimeTimeout = setTimeout(() => this._acceptOpen(), minUptime);\n\n    assert(this._ws, \"WebSocket is not defined\");\n\n    this._ws.binaryType = this._binaryType;\n\n    // send enqueued messages (messages sent before websocket open event)\n    this._messageQueue.forEach((message) => {\n      this._ws?.send(message);\n    });\n    this._messageQueue = [];\n\n    if (this.onopen) {\n      this.onopen(event);\n    }\n    this.dispatchEvent(cloneEvent(event));\n  };\n\n  private _handleMessage = (event: MessageEvent) => {\n    this._debug(\"message event\");\n\n    if (this.onmessage) {\n      this.onmessage(event);\n    }\n    this.dispatchEvent(cloneEvent(event));\n  };\n\n  private _handleError = (event: ErrorEvent) => {\n    this._debug(\"error event\", event.message);\n    this._disconnect(\n      undefined,\n      event.message === \"TIMEOUT\" ? \"timeout\" : undefined\n    );\n\n    if (this.onerror) {\n      this.onerror(event);\n    }\n    this._debug(\"exec error listeners\");\n    this.dispatchEvent(cloneEvent(event));\n\n    this._connect();\n  };\n\n  private _handleClose = (event: CloseEvent) => {\n    this._debug(\"close event\");\n    this._clearTimeouts();\n\n    if (this._shouldReconnect) {\n      this._connect();\n    }\n\n    if (this.onclose) {\n      this.onclose(event);\n    }\n    this.dispatchEvent(cloneEvent(event));\n  };\n\n  private _removeListeners() {\n    if (!this._ws) {\n      return;\n    }\n    this._debug(\"removeListeners\");\n    this._ws.removeEventListener(\"open\", this._handleOpen);\n    this._ws.removeEventListener(\"close\", this._handleClose);\n    this._ws.removeEventListener(\"message\", this._handleMessage);\n    // @ts-expect-error we need to fix event/listerner types\n    this._ws.removeEventListener(\"error\", this._handleError);\n  }\n\n  private _addListeners() {\n    if (!this._ws) {\n      return;\n    }\n    this._debug(\"addListeners\");\n    this._ws.addEventListener(\"open\", this._handleOpen);\n    this._ws.addEventListener(\"close\", this._handleClose);\n    this._ws.addEventListener(\"message\", this._handleMessage);\n    // @ts-expect-error we need to fix event/listener types\n    this._ws.addEventListener(\"error\", this._handleError);\n  }\n\n  private _clearTimeouts() {\n    clearTimeout(this._connectTimeout);\n    clearTimeout(this._uptimeTimeout);\n  }\n}\n"]}