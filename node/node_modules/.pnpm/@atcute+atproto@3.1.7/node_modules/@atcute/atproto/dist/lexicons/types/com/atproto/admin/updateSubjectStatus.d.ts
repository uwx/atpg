import * as v from '@atcute/lexicons/validations';
import * as ComAtprotoAdminDefs from './defs.js';
import * as ComAtprotoRepoStrongRef from '../repo/strongRef.js';
declare const _mainSchema: v.XRPCProcedureMetadata<null, {
    type: "lex";
    schema: v.ObjectSchema<{
        readonly deactivated: v.OptionalSchema<ComAtprotoAdminDefs.statusAttrSchema, undefined>;
        readonly subject: v.VariantSchema<readonly [ComAtprotoAdminDefs.repoBlobRefSchema, ComAtprotoAdminDefs.repoRefSchema, ComAtprotoRepoStrongRef.mainSchema], boolean>;
        readonly takedown: v.OptionalSchema<ComAtprotoAdminDefs.statusAttrSchema, undefined>;
    }>;
}, {
    type: "lex";
    schema: v.ObjectSchema<{
        readonly subject: v.VariantSchema<readonly [ComAtprotoAdminDefs.repoBlobRefSchema, ComAtprotoAdminDefs.repoRefSchema, ComAtprotoRepoStrongRef.mainSchema], boolean>;
        readonly takedown: v.OptionalSchema<ComAtprotoAdminDefs.statusAttrSchema, undefined>;
    }>;
}, "com.atproto.admin.updateSubjectStatus">;
type main$schematype = typeof _mainSchema;
export interface mainSchema extends main$schematype {
}
export declare const mainSchema: mainSchema;
export interface $params {
}
export interface $input extends v.InferXRPCBodyInput<mainSchema['input']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCProcedures {
        'com.atproto.admin.updateSubjectStatus': mainSchema;
    }
}
export {};
//# sourceMappingURL=updateSubjectStatus.d.ts.map