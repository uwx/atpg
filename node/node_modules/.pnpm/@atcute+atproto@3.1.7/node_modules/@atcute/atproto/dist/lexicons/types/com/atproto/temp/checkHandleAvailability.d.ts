import * as v from '@atcute/lexicons/validations';
declare const _mainSchema: v.XRPCQueryMetadata<v.ObjectSchema<{
    /**
     * User-provided birth date. Might be used to build handle suggestions.
     */
    birthDate: v.OptionalSchema<v.FormattedStringSchema<"datetime">, undefined>;
    /**
     * User-provided email. Might be used to build handle suggestions.
     */
    email: v.OptionalSchema<v.StringSchema<string>, undefined>;
    /**
     * Tentative handle. Will be checked for availability or used to build handle suggestions.
     */
    handle: v.FormattedStringSchema<"handle">;
}>, {
    type: "lex";
    schema: v.ObjectSchema<{
        /**
         * Echo of the input handle.
         */
        handle: v.FormattedStringSchema<"handle">;
        readonly result: v.VariantSchema<readonly [resultAvailableSchema, resultUnavailableSchema], boolean>;
    }>;
}, "com.atproto.temp.checkHandleAvailability">;
declare const _resultAvailableSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"com.atproto.temp.checkHandleAvailability#resultAvailable">, undefined>;
}>;
declare const _resultUnavailableSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"com.atproto.temp.checkHandleAvailability#resultUnavailable">, undefined>;
    /**
     * List of suggested handles based on the provided inputs.
     */
    readonly suggestions: v.ArraySchema<suggestionSchema>;
}>;
declare const _suggestionSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"com.atproto.temp.checkHandleAvailability#suggestion">, undefined>;
    handle: v.FormattedStringSchema<"handle">;
    /**
     * Method used to build this suggestion. Should be considered opaque to clients. Can be used for metrics.
     */
    method: v.StringSchema<string>;
}>;
type main$schematype = typeof _mainSchema;
type resultAvailable$schematype = typeof _resultAvailableSchema;
type resultUnavailable$schematype = typeof _resultUnavailableSchema;
type suggestion$schematype = typeof _suggestionSchema;
export interface mainSchema extends main$schematype {
}
export interface resultAvailableSchema extends resultAvailable$schematype {
}
export interface resultUnavailableSchema extends resultUnavailable$schematype {
}
export interface suggestionSchema extends suggestion$schematype {
}
export declare const mainSchema: mainSchema;
export declare const resultAvailableSchema: resultAvailableSchema;
export declare const resultUnavailableSchema: resultUnavailableSchema;
export declare const suggestionSchema: suggestionSchema;
export interface ResultAvailable extends v.InferInput<typeof resultAvailableSchema> {
}
export interface ResultUnavailable extends v.InferInput<typeof resultUnavailableSchema> {
}
export interface Suggestion extends v.InferInput<typeof suggestionSchema> {
}
export interface $params extends v.InferInput<mainSchema['params']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCQueries {
        'com.atproto.temp.checkHandleAvailability': mainSchema;
    }
}
export {};
//# sourceMappingURL=checkHandleAvailability.d.ts.map