import * as v from '@atcute/lexicons/validations';
import * as ComAtprotoAdminDefs from './defs.js';
import * as ComAtprotoRepoStrongRef from '../repo/strongRef.js';
declare const _mainSchema: v.XRPCQueryMetadata<v.ObjectSchema<{
    blob: v.OptionalSchema<v.FormattedStringSchema<"cid">, undefined>;
    did: v.OptionalSchema<v.FormattedStringSchema<"did">, undefined>;
    uri: v.OptionalSchema<v.FormattedStringSchema<"at-uri">, undefined>;
}>, {
    type: "lex";
    schema: v.ObjectSchema<{
        readonly deactivated: v.OptionalSchema<ComAtprotoAdminDefs.statusAttrSchema, undefined>;
        readonly subject: v.VariantSchema<readonly [ComAtprotoAdminDefs.repoBlobRefSchema, ComAtprotoAdminDefs.repoRefSchema, ComAtprotoRepoStrongRef.mainSchema], boolean>;
        readonly takedown: v.OptionalSchema<ComAtprotoAdminDefs.statusAttrSchema, undefined>;
    }>;
}, "com.atproto.admin.getSubjectStatus">;
type main$schematype = typeof _mainSchema;
export interface mainSchema extends main$schematype {
}
export declare const mainSchema: mainSchema;
export interface $params extends v.InferInput<mainSchema['params']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCQueries {
        'com.atproto.admin.getSubjectStatus': mainSchema;
    }
}
export {};
//# sourceMappingURL=getSubjectStatus.d.ts.map