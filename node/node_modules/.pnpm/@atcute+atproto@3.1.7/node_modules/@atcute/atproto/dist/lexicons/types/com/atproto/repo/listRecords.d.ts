import * as v from '@atcute/lexicons/validations';
declare const _mainSchema: v.XRPCQueryMetadata<v.ObjectSchema<{
    /**
     * The NSID of the record type.
     */
    collection: v.FormattedStringSchema<"nsid">;
    cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
    /**
     * The number of records to return.
     * @minimum 1
     * @maximum 100
     * @default 50
     */
    limit: v.OptionalSchema<v.SchemaWithConstraint<v.IntegerSchema, readonly [v.IntegerRangeConstraint<1, 100>]>, 50>;
    /**
     * The handle or DID of the repo.
     */
    repo: v.FormattedStringSchema<"at-identifier">;
    /**
     * Flag to reverse the order of the returned records.
     */
    reverse: v.OptionalSchema<v.BooleanSchema, undefined>;
}>, {
    type: "lex";
    schema: v.ObjectSchema<{
        cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
        readonly records: v.ArraySchema<recordSchema>;
    }>;
}, "com.atproto.repo.listRecords">;
declare const _recordSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"com.atproto.repo.listRecords#record">, undefined>;
    cid: v.FormattedStringSchema<"cid">;
    uri: v.FormattedStringSchema<"at-uri">;
    value: v.UnknownSchema;
}>;
type main$schematype = typeof _mainSchema;
type record$schematype = typeof _recordSchema;
export interface mainSchema extends main$schematype {
}
export interface recordSchema extends record$schematype {
}
export declare const mainSchema: mainSchema;
export declare const recordSchema: recordSchema;
export interface Record extends v.InferInput<typeof recordSchema> {
}
export interface $params extends v.InferInput<mainSchema['params']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCQueries {
        'com.atproto.repo.listRecords': mainSchema;
    }
}
export {};
//# sourceMappingURL=listRecords.d.ts.map