import * as v from '@atcute/lexicons/validations';
declare const _mainSchema: v.XRPCQueryMetadata<v.ObjectSchema<{
    /**
     * The DID of the service that the token will be used to authenticate with
     */
    aud: v.FormattedStringSchema<"did">;
    /**
     * The time in Unix Epoch seconds that the JWT expires. Defaults to 60 seconds in the future. The service may enforce certain time bounds on tokens depending on the requested scope.
     */
    exp: v.OptionalSchema<v.IntegerSchema, undefined>;
    /**
     * Lexicon (XRPC) method to bind the requested token to
     */
    lxm: v.OptionalSchema<v.FormattedStringSchema<"nsid">, undefined>;
}>, {
    type: "lex";
    schema: v.ObjectSchema<{
        token: v.StringSchema<string>;
    }>;
}, "com.atproto.server.getServiceAuth">;
type main$schematype = typeof _mainSchema;
export interface mainSchema extends main$schematype {
}
export declare const mainSchema: mainSchema;
export interface $params extends v.InferInput<mainSchema['params']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCQueries {
        'com.atproto.server.getServiceAuth': mainSchema;
    }
}
export {};
//# sourceMappingURL=getServiceAuth.d.ts.map