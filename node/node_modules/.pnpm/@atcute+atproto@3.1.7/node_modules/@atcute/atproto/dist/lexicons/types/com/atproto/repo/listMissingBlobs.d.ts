import * as v from '@atcute/lexicons/validations';
declare const _mainSchema: v.XRPCQueryMetadata<v.ObjectSchema<{
    cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
    /**
     * @minimum 1
     * @maximum 1000
     * @default 500
     */
    limit: v.OptionalSchema<v.SchemaWithConstraint<v.IntegerSchema, readonly [v.IntegerRangeConstraint<1, 1000>]>, 500>;
}>, {
    type: "lex";
    schema: v.ObjectSchema<{
        readonly blobs: v.ArraySchema<recordBlobSchema>;
        cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
    }>;
}, "com.atproto.repo.listMissingBlobs">;
declare const _recordBlobSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"com.atproto.repo.listMissingBlobs#recordBlob">, undefined>;
    cid: v.FormattedStringSchema<"cid">;
    recordUri: v.FormattedStringSchema<"at-uri">;
}>;
type main$schematype = typeof _mainSchema;
type recordBlob$schematype = typeof _recordBlobSchema;
export interface mainSchema extends main$schematype {
}
export interface recordBlobSchema extends recordBlob$schematype {
}
export declare const mainSchema: mainSchema;
export declare const recordBlobSchema: recordBlobSchema;
export interface RecordBlob extends v.InferInput<typeof recordBlobSchema> {
}
export interface $params extends v.InferInput<mainSchema['params']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCQueries {
        'com.atproto.repo.listMissingBlobs': mainSchema;
    }
}
export {};
//# sourceMappingURL=listMissingBlobs.d.ts.map