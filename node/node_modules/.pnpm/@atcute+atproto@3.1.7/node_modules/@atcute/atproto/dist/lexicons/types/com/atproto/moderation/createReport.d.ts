import * as v from '@atcute/lexicons/validations';
import * as ComAtprotoAdminDefs from '../admin/defs.js';
import * as ComAtprotoModerationDefs from './defs.js';
import * as ComAtprotoRepoStrongRef from '../repo/strongRef.js';
declare const _mainSchema: v.XRPCProcedureMetadata<null, {
    type: "lex";
    schema: v.ObjectSchema<{
        readonly modTool: v.OptionalSchema<modToolSchema, undefined>;
        /**
         * Additional context about the content and violation.
         * @maxLength 20000
         * @maxGraphemes 2000
         */
        reason: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 20000>, v.StringGraphemesConstraint<0, 2000>]>, undefined>;
        /**
         * Indicates the broad category of violation the report is for.
         */
        readonly reasonType: ComAtprotoModerationDefs.reasonTypeSchema;
        readonly subject: v.VariantSchema<readonly [ComAtprotoAdminDefs.repoRefSchema, ComAtprotoRepoStrongRef.mainSchema], boolean>;
    }>;
}, {
    type: "lex";
    schema: v.ObjectSchema<{
        createdAt: v.FormattedStringSchema<"datetime">;
        id: v.IntegerSchema;
        /**
         * @maxLength 20000
         * @maxGraphemes 2000
         */
        reason: v.OptionalSchema<v.SchemaWithConstraint<v.StringSchema<string>, readonly [v.StringLengthConstraint<0, 20000>, v.StringGraphemesConstraint<0, 2000>]>, undefined>;
        readonly reasonType: ComAtprotoModerationDefs.reasonTypeSchema;
        reportedBy: v.FormattedStringSchema<"did">;
        readonly subject: v.VariantSchema<readonly [ComAtprotoAdminDefs.repoRefSchema, ComAtprotoRepoStrongRef.mainSchema], boolean>;
    }>;
}, "com.atproto.moderation.createReport">;
declare const _modToolSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"com.atproto.moderation.createReport#modTool">, undefined>;
    /**
     * Additional arbitrary metadata about the source
     */
    meta: v.OptionalSchema<v.UnknownSchema, undefined>;
    /**
     * Name/identifier of the source (e.g., 'bsky-app/android', 'bsky-web/chrome')
     */
    name: v.StringSchema<string>;
}>;
type main$schematype = typeof _mainSchema;
type modTool$schematype = typeof _modToolSchema;
export interface mainSchema extends main$schematype {
}
export interface modToolSchema extends modTool$schematype {
}
export declare const mainSchema: mainSchema;
export declare const modToolSchema: modToolSchema;
export interface ModTool extends v.InferInput<typeof modToolSchema> {
}
export interface $params {
}
export interface $input extends v.InferXRPCBodyInput<mainSchema['input']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCProcedures {
        'com.atproto.moderation.createReport': mainSchema;
    }
}
export {};
//# sourceMappingURL=createReport.d.ts.map