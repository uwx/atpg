import * as v from '@atcute/lexicons/validations';
import * as ComAtprotoLabelDefs from './defs.js';
declare const _infoSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"com.atproto.label.subscribeLabels#info">, undefined>;
    message: v.OptionalSchema<v.StringSchema<string>, undefined>;
    name: v.StringSchema<(string & {}) | "OutdatedCursor">;
}>;
declare const _labelsSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"com.atproto.label.subscribeLabels#labels">, undefined>;
    readonly labels: v.ArraySchema<ComAtprotoLabelDefs.labelSchema>;
    seq: v.IntegerSchema;
}>;
declare const _mainSchema: v.XRPCSubscriptionMetadata<v.ObjectSchema<{
    /**
     * The last known event seq number to backfill from.
     */
    cursor: v.OptionalSchema<v.IntegerSchema, undefined>;
}>, v.VariantSchema<readonly [infoSchema, labelsSchema], boolean>, "com.atproto.label.subscribeLabels">;
type info$schematype = typeof _infoSchema;
type labels$schematype = typeof _labelsSchema;
type main$schematype = typeof _mainSchema;
export interface infoSchema extends info$schematype {
}
export interface labelsSchema extends labels$schematype {
}
export interface mainSchema extends main$schematype {
}
export declare const infoSchema: infoSchema;
export declare const labelsSchema: labelsSchema;
export declare const mainSchema: mainSchema;
export interface Info extends v.InferInput<typeof infoSchema> {
}
export interface Labels extends v.InferInput<typeof labelsSchema> {
}
export interface $params extends v.InferInput<mainSchema['params']> {
}
export type $message = v.InferInput<mainSchema['message']>;
declare module '@atcute/lexicons/ambient' {
    interface XRPCSubscriptions {
        'com.atproto.label.subscribeLabels': mainSchema;
    }
}
export {};
//# sourceMappingURL=subscribeLabels.d.ts.map