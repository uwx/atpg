import * as v from '@atcute/lexicons/validations';
import * as ComAtprotoSyncDefs from './defs.js';
const _hostSchema = /*#__PURE__*/ v.object({
    $type: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.literal('com.atproto.sync.listHosts#host')),
    accountCount: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.integer()),
    /**
     * hostname of server; not a URL (no scheme)
     */
    hostname: /*#__PURE__*/ v.string(),
    /**
     * Recent repo stream event sequence number. May be delayed from actual stream processing (eg, persisted cursor not in-memory cursor).
     */
    seq: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.integer()),
    get status() {
        return /*#__PURE__*/ v.optional(ComAtprotoSyncDefs.hostStatusSchema);
    },
});
const _mainSchema = /*#__PURE__*/ v.query('com.atproto.sync.listHosts', {
    params: /*#__PURE__*/ v.object({
        cursor: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.string()),
        /**
         * @minimum 1
         * @maximum 1000
         * @default 200
         */
        limit: /*#__PURE__*/ v.optional(
        /*#__PURE__*/ v.constrain(/*#__PURE__*/ v.integer(), [/*#__PURE__*/ v.integerRange(1, 1000)]), 200),
    }),
    output: {
        type: 'lex',
        schema: /*#__PURE__*/ v.object({
            cursor: /*#__PURE__*/ v.optional(/*#__PURE__*/ v.string()),
            /**
             * Sort order is not formally specified. Recommended order is by time host was first seen by the server, with oldest first.
             */
            get hosts() {
                return /*#__PURE__*/ v.array(hostSchema);
            },
        }),
    },
});
export const hostSchema = _hostSchema;
export const mainSchema = _mainSchema;
//# sourceMappingURL=listHosts.js.map