import * as v from '@atcute/lexicons/validations';
import * as ComAtprotoRepoDefs from './defs.js';
declare const _mainSchema: v.XRPCProcedureMetadata<null, {
    type: "lex";
    schema: v.ObjectSchema<{
        /**
         * The NSID of the record collection.
         */
        collection: v.FormattedStringSchema<"nsid">;
        /**
         * The handle or DID of the repo (aka, current account).
         */
        repo: v.FormattedStringSchema<"at-identifier">;
        /**
         * The Record Key.
         */
        rkey: v.FormattedStringSchema<"record-key">;
        /**
         * Compare and swap with the previous commit by CID.
         */
        swapCommit: v.OptionalSchema<v.FormattedStringSchema<"cid">, undefined>;
        /**
         * Compare and swap with the previous record by CID.
         */
        swapRecord: v.OptionalSchema<v.FormattedStringSchema<"cid">, undefined>;
    }>;
}, {
    type: "lex";
    schema: v.ObjectSchema<{
        readonly commit: v.OptionalSchema<ComAtprotoRepoDefs.commitMetaSchema, undefined>;
    }>;
}, "com.atproto.repo.deleteRecord">;
type main$schematype = typeof _mainSchema;
export interface mainSchema extends main$schematype {
}
export declare const mainSchema: mainSchema;
export interface $params {
}
export interface $input extends v.InferXRPCBodyInput<mainSchema['input']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCProcedures {
        'com.atproto.repo.deleteRecord': mainSchema;
    }
}
export {};
//# sourceMappingURL=deleteRecord.d.ts.map