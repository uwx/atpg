import * as v from '@atcute/lexicons/validations';
import * as ComAtprotoLabelDefs from './defs.js';
declare const _mainSchema: v.XRPCQueryMetadata<v.ObjectSchema<{
    cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
    /**
     * @minimum 1
     * @maximum 250
     * @default 50
     */
    limit: v.OptionalSchema<v.SchemaWithConstraint<v.IntegerSchema, readonly [v.IntegerRangeConstraint<1, 250>]>, 50>;
    /**
     * Optional list of label sources (DIDs) to filter on.
     */
    sources: v.OptionalSchema<v.ArraySchema<v.FormattedStringSchema<"did">>, undefined>;
    /**
     * List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI.
     * @minLength 1
     */
    uriPatterns: v.SchemaWithConstraint<v.ArraySchema<v.StringSchema<string>>, readonly [v.ArrayLengthConstraint<1, number>]>;
}>, {
    type: "lex";
    schema: v.ObjectSchema<{
        cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
        readonly labels: v.ArraySchema<ComAtprotoLabelDefs.labelSchema>;
    }>;
}, "com.atproto.label.queryLabels">;
type main$schematype = typeof _mainSchema;
export interface mainSchema extends main$schematype {
}
export declare const mainSchema: mainSchema;
export interface $params extends v.InferInput<mainSchema['params']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCQueries {
        'com.atproto.label.queryLabels': mainSchema;
    }
}
export {};
//# sourceMappingURL=queryLabels.d.ts.map