import * as v from '@atcute/lexicons/validations';
declare const _accountCodesSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"com.atproto.server.createInviteCodes#accountCodes">, undefined>;
    account: v.StringSchema<string>;
    codes: v.ArraySchema<v.StringSchema<string>>;
}>;
declare const _mainSchema: v.XRPCProcedureMetadata<null, {
    type: "lex";
    schema: v.ObjectSchema<{
        /**
         * @default 1
         */
        codeCount: v.OptionalSchema<v.IntegerSchema, 1>;
        forAccounts: v.OptionalSchema<v.ArraySchema<v.FormattedStringSchema<"did">>, undefined>;
        useCount: v.IntegerSchema;
    }>;
}, {
    type: "lex";
    schema: v.ObjectSchema<{
        readonly codes: v.ArraySchema<accountCodesSchema>;
    }>;
}, "com.atproto.server.createInviteCodes">;
type accountCodes$schematype = typeof _accountCodesSchema;
type main$schematype = typeof _mainSchema;
export interface accountCodesSchema extends accountCodes$schematype {
}
export interface mainSchema extends main$schematype {
}
export declare const accountCodesSchema: accountCodesSchema;
export declare const mainSchema: mainSchema;
export interface AccountCodes extends v.InferInput<typeof accountCodesSchema> {
}
export interface $params {
}
export interface $input extends v.InferXRPCBodyInput<mainSchema['input']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCProcedures {
        'com.atproto.server.createInviteCodes': mainSchema;
    }
}
export {};
//# sourceMappingURL=createInviteCodes.d.ts.map