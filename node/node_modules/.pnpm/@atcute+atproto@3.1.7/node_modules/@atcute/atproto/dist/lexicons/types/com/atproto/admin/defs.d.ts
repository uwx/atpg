import * as v from '@atcute/lexicons/validations';
import * as ComAtprotoServerDefs from '../server/defs.js';
declare const _accountViewSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"com.atproto.admin.defs#accountView">, undefined>;
    deactivatedAt: v.OptionalSchema<v.FormattedStringSchema<"datetime">, undefined>;
    did: v.FormattedStringSchema<"did">;
    email: v.OptionalSchema<v.StringSchema<string>, undefined>;
    emailConfirmedAt: v.OptionalSchema<v.FormattedStringSchema<"datetime">, undefined>;
    handle: v.FormattedStringSchema<"handle">;
    indexedAt: v.FormattedStringSchema<"datetime">;
    inviteNote: v.OptionalSchema<v.StringSchema<string>, undefined>;
    readonly invitedBy: v.OptionalSchema<ComAtprotoServerDefs.inviteCodeSchema, undefined>;
    readonly invites: v.OptionalSchema<v.ArraySchema<ComAtprotoServerDefs.inviteCodeSchema>, undefined>;
    invitesDisabled: v.OptionalSchema<v.BooleanSchema, undefined>;
    relatedRecords: v.OptionalSchema<v.ArraySchema<v.UnknownSchema>, undefined>;
    readonly threatSignatures: v.OptionalSchema<v.ArraySchema<threatSignatureSchema>, undefined>;
}>;
declare const _repoBlobRefSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"com.atproto.admin.defs#repoBlobRef">, undefined>;
    cid: v.FormattedStringSchema<"cid">;
    did: v.FormattedStringSchema<"did">;
    recordUri: v.OptionalSchema<v.FormattedStringSchema<"at-uri">, undefined>;
}>;
declare const _repoRefSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"com.atproto.admin.defs#repoRef">, undefined>;
    did: v.FormattedStringSchema<"did">;
}>;
declare const _statusAttrSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"com.atproto.admin.defs#statusAttr">, undefined>;
    applied: v.BooleanSchema;
    ref: v.OptionalSchema<v.StringSchema<string>, undefined>;
}>;
declare const _threatSignatureSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"com.atproto.admin.defs#threatSignature">, undefined>;
    property: v.StringSchema<string>;
    value: v.StringSchema<string>;
}>;
type accountView$schematype = typeof _accountViewSchema;
type repoBlobRef$schematype = typeof _repoBlobRefSchema;
type repoRef$schematype = typeof _repoRefSchema;
type statusAttr$schematype = typeof _statusAttrSchema;
type threatSignature$schematype = typeof _threatSignatureSchema;
export interface accountViewSchema extends accountView$schematype {
}
export interface repoBlobRefSchema extends repoBlobRef$schematype {
}
export interface repoRefSchema extends repoRef$schematype {
}
export interface statusAttrSchema extends statusAttr$schematype {
}
export interface threatSignatureSchema extends threatSignature$schematype {
}
export declare const accountViewSchema: accountViewSchema;
export declare const repoBlobRefSchema: repoBlobRefSchema;
export declare const repoRefSchema: repoRefSchema;
export declare const statusAttrSchema: statusAttrSchema;
export declare const threatSignatureSchema: threatSignatureSchema;
export interface AccountView extends v.InferInput<typeof accountViewSchema> {
}
export interface RepoBlobRef extends v.InferInput<typeof repoBlobRefSchema> {
}
export interface RepoRef extends v.InferInput<typeof repoRefSchema> {
}
export interface StatusAttr extends v.InferInput<typeof statusAttrSchema> {
}
export interface ThreatSignature extends v.InferInput<typeof threatSignatureSchema> {
}
export {};
//# sourceMappingURL=defs.d.ts.map