import * as v from '@atcute/lexicons/validations';
import * as ComAtprotoSyncDefs from './defs.js';
declare const _hostSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"com.atproto.sync.listHosts#host">, undefined>;
    accountCount: v.OptionalSchema<v.IntegerSchema, undefined>;
    /**
     * hostname of server; not a URL (no scheme)
     */
    hostname: v.StringSchema<string>;
    /**
     * Recent repo stream event sequence number. May be delayed from actual stream processing (eg, persisted cursor not in-memory cursor).
     */
    seq: v.OptionalSchema<v.IntegerSchema, undefined>;
    readonly status: v.OptionalSchema<ComAtprotoSyncDefs.hostStatusSchema, undefined>;
}>;
declare const _mainSchema: v.XRPCQueryMetadata<v.ObjectSchema<{
    cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
    /**
     * @minimum 1
     * @maximum 1000
     * @default 200
     */
    limit: v.OptionalSchema<v.SchemaWithConstraint<v.IntegerSchema, readonly [v.IntegerRangeConstraint<1, 1000>]>, 200>;
}>, {
    type: "lex";
    schema: v.ObjectSchema<{
        cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
        /**
         * Sort order is not formally specified. Recommended order is by time host was first seen by the server, with oldest first.
         */
        readonly hosts: v.ArraySchema<hostSchema>;
    }>;
}, "com.atproto.sync.listHosts">;
type host$schematype = typeof _hostSchema;
type main$schematype = typeof _mainSchema;
export interface hostSchema extends host$schematype {
}
export interface mainSchema extends main$schematype {
}
export declare const hostSchema: hostSchema;
export declare const mainSchema: mainSchema;
export interface Host extends v.InferInput<typeof hostSchema> {
}
export interface $params extends v.InferInput<mainSchema['params']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCQueries {
        'com.atproto.sync.listHosts': mainSchema;
    }
}
export {};
//# sourceMappingURL=listHosts.d.ts.map