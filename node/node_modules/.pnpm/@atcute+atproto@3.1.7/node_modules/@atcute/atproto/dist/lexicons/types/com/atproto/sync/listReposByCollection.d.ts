import * as v from '@atcute/lexicons/validations';
declare const _mainSchema: v.XRPCQueryMetadata<v.ObjectSchema<{
    collection: v.FormattedStringSchema<"nsid">;
    cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
    /**
     * Maximum size of response set. Recommend setting a large maximum (1000+) when enumerating large DID lists.
     * @minimum 1
     * @maximum 2000
     * @default 500
     */
    limit: v.OptionalSchema<v.SchemaWithConstraint<v.IntegerSchema, readonly [v.IntegerRangeConstraint<1, 2000>]>, 500>;
}>, {
    type: "lex";
    schema: v.ObjectSchema<{
        cursor: v.OptionalSchema<v.StringSchema<string>, undefined>;
        readonly repos: v.ArraySchema<repoSchema>;
    }>;
}, "com.atproto.sync.listReposByCollection">;
declare const _repoSchema: v.ObjectSchema<{
    $type: v.OptionalSchema<v.LiteralSchema<"com.atproto.sync.listReposByCollection#repo">, undefined>;
    did: v.FormattedStringSchema<"did">;
}>;
type main$schematype = typeof _mainSchema;
type repo$schematype = typeof _repoSchema;
export interface mainSchema extends main$schematype {
}
export interface repoSchema extends repo$schematype {
}
export declare const mainSchema: mainSchema;
export declare const repoSchema: repoSchema;
export interface Repo extends v.InferInput<typeof repoSchema> {
}
export interface $params extends v.InferInput<mainSchema['params']> {
}
export interface $output extends v.InferXRPCBodyInput<mainSchema['output']> {
}
declare module '@atcute/lexicons/ambient' {
    interface XRPCQueries {
        'com.atproto.sync.listReposByCollection': mainSchema;
    }
}
export {};
//# sourceMappingURL=listReposByCollection.d.ts.map