import { isActorIdentifier } from './at-identifier.js';
import { isDid } from './did.js';
import { isNsid } from './nsid.js';
import { isRecordKey } from './record-key.js';
import {} from '../utils.js';
const ATURI_RE = /^at:\/\/([a-zA-Z0-9._:%-]+)(?:\/([a-zA-Z0-9-.]+)(?:\/([a-zA-Z0-9._~:@!$&%')(*+,;=-]+))?)?(?:#(\/[a-zA-Z0-9._~:@!$&%')(*+,;=\-[\]/\\]*))?$/;
// #__NO_SIDE_EFFECTS__
export const isResourceUri = (input) => {
    if (typeof input !== 'string') {
        return false;
    }
    const match = ATURI_RE.exec(input);
    if (match === null) {
        return false;
    }
    const [, r, c, k] = match;
    return isActorIdentifier(r) && (c === undefined || isNsid(c)) && (k === undefined || isRecordKey(k));
};
// #__NO_SIDE_EFFECTS__
export const parseResourceUri = (input) => {
    const match = ATURI_RE.exec(input);
    if (match === null) {
        return { ok: false, error: `invalid at-uri: ${input}` };
    }
    const [, r, c, k, f] = match;
    if (!isActorIdentifier(r)) {
        return { ok: false, error: `invalid repo in at-uri: ${r}` };
    }
    if (c !== undefined && !isNsid(c)) {
        return { ok: false, error: `invalid collection in at-uri: ${c}` };
    }
    if (k !== undefined && !isRecordKey(k)) {
        return { ok: false, error: `invalid rkey in at-uri: ${k}` };
    }
    return { ok: true, value: { repo: r, collection: c, rkey: k, fragment: f } };
};
// #__NO_SIDE_EFFECTS__
export const isCanonicalResourceUri = (input) => {
    if (typeof input !== 'string') {
        return false;
    }
    const match = ATURI_RE.exec(input);
    if (match === null) {
        return false;
    }
    const [, r, c, k] = match;
    return isDid(r) && isNsid(c) && isRecordKey(k);
};
// #__NO_SIDE_EFFECTS__
export const parseCanonicalResourceUri = (input) => {
    const match = ATURI_RE.exec(input);
    if (match === null) {
        return { ok: false, error: `invalid canonical-at-uri: ${input}` };
    }
    const [, r, c, k, f] = match;
    if (!isDid(r)) {
        return { ok: false, error: `invalid repo in canonical-at-uri: ${r}` };
    }
    if (!isNsid(c)) {
        return { ok: false, error: `invalid collection in canonical-at-uri: ${c}` };
    }
    if (!isRecordKey(k)) {
        return { ok: false, error: `invalid rkey in canonical-at-uri: ${k}` };
    }
    return { ok: true, value: { repo: r, collection: c, rkey: k, fragment: f } };
};
//# sourceMappingURL=at-uri.js.map