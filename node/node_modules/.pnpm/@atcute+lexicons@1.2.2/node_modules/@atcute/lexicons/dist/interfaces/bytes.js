const BYTES_SYMBOL = Symbol.for('@atcute/bytes-wrapper');
/**
 * @internal
 */
// #__NO_SIDE_EFFECTS__
export const _isBytesWrapper = (input) => {
    return typeof input === 'object' && input !== null && BYTES_SYMBOL in input;
};
const BASE64_RE = /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}(?:==)?|[A-Za-z0-9+/]{3}=?)?$/;
const isBase64 = (input) => {
    if (typeof input !== 'string') {
        return false;
    }
    return BASE64_RE.test(input);
};
// #__NO_SIDE_EFFECTS__
export const isBytes = (input) => {
    const v = input;
    return (typeof v === 'object' &&
        v !== null &&
        (BYTES_SYMBOL in v || (isBase64(v.$bytes) && Object.keys(v).length === 1)));
};
//# sourceMappingURL=bytes.js.map